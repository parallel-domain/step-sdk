syntax = "proto3";

package pd.data;

import "options.proto";

// Config message for Instance Point 3D annotation data
message InstancePoint3DAnnotatorConfig
{
  string input_instance_map = 1 [(type)=eMeshIDMap, (stream)=eInput];
  string input_instance_state = 7 [(type)=eAnnotation, (stream)=eInput];
  string instance_point_map = 2;
  string semantic_label_filepath = 3 [(type)=eConfiguration];
  string output_path = 4 [(type)=eAnnotation, (stream)=eOutput];
  string output_ontology_path = 5 [(type)=eSemanticLabelMap, (stream)=eOutput];
  
  // Remove points of these semantic IDs if associated object is a human
  // occupying a vehicle
  repeated uint32 cull_occupant_points_of_semantic_ids = 8;
  
  // Wheel keypoints are not output from the IG but created from vehicle keypoints
  // This fields lets the transform know what semantic ID to label them as
  uint32 wheel_semantic_id = 6;
}

message InstancePoint3DMetadata
{
    uint32 instance_id = 1;
    uint32 semantic_id = 2; 
    string instance_point_name = 3;
}

message InstancePoint2DMetadata
{
    uint32 instance_id = 1;
	uint32 semantic_id = 2; 
    string instance_point_name = 3;
    bool visibility = 4;
    float distance_from_ego = 5;
}

message InstancePointConfiguration
{
	// instance point name as defined at the source (IG). Regex allowed. Exact matches
	// will be searched for first, then a regex pattern prioritized by longest match.
	// If an entry's regex is invalid, a warning will be raised and only exact matches
	// will be used for it.
	string instance_point_input_name_pattern = 1;
	
	uint32 instance_point_output_semantic_id = 2;
	
	// instance point name to remap to. If blank, instance_point_key is used
	string instance_point_output_name = 3;
}

message InstancePointMap
{
	repeated InstancePointConfiguration instance_point_mappings = 1;
}