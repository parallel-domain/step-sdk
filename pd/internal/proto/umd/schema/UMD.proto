// Copyright (c) 2021 Parallel Domain Inc.
// All rights reserved.
//
// Use of these files is only permitted if you have entered into a separate written license agreement with Parallel Domain Inc.
// Version 1.1.0

syntax = "proto2";

package umd;

/*
Point defined by a latitude, longitude and altitude
*/
message Point_LLA
{
    required double lat = 1;
    required double lon = 2;
    required double alt = 3;
}

/*
Point defined in Earth-Centered, Earth-Fixed coordinate system.
*/
message Point_ECEF
{
    required double x = 1;
    required double y = 2;
    required double z = 3;
}

/*
3D Point in East, North Up coordinate system
*/
message Point_ENU
{
    required float x = 1;
    required float y = 2;
    required float z = 3;
}

/*
Message to store the coefficients of a quaternion
*/
message Quaternion
{
    required float w = 1;
    required float x = 2;
    required float y = 3;
    required float z = 4;
}

/*
Axis aligned bounding box
*/
message AABB
{
    /*
    Point that defines the minimum corner of the axis aligned bounding box
    */
    required Point_ENU min = 1;

    /*
    Point that defines the maximum corner of the axis aligned bounding box
    */
    required Point_ENU max = 2;
}

/*
Message to store information about lines or edges in a UMD map.
*/
message Edge
{
    /*
    The integer ID of the edge.
    */
    required uint64     id          = 1;

    /*
    Boolean value to store whether an edge is closed (first point equals last) or not.
    */
    required bool       open        = 2;

    /*
    List of points that define the edge.
    */
    repeated Point_ENU  points      = 3;

    /*
    String to store optional data about the :obj:`Edge`.
    */
    optional string     user_data   = 4;
}

/*
Message to store map level information and metadata.
*/
message Info
{
    /*
    The name of the map
    */
    required string name = 1;

    /*
    The latitude, longitude and altitude of the UMD map.
    */
    required Point_LLA origin = 2;

    optional string audit = 3;
}

/*
A lane object within the UMD world
*/
message LaneSegment
{
    /*
    All possible lane types
    */
    enum LaneType
    {
        UNDEFINED_LANE = 0;
        DRIVABLE       = 1;
        NON_DRIVABLE   = 2;
        PARKING        = 3;
        SHOULDER       = 4;
        BIKING         = 5;
        CROSSWALK      = 6;
        RESTRICTED     = 7;
        PARKING_AISLE  = 8;
        PARKING_SPACE  = 9;
        SIDEWALK       = 10;
    }

    /*
    All possible directions of a lane
    */
    enum Direction
    {
        UNDEFINED_DIR  = 0;
        FORWARD        = 1;
        BACKWARD       = 2;
        BIDIRECTIONAL  = 3;
    }

    /*
    All possible turn types
    */
    enum TurnType
    {
        STRAIGHT       = 0;
        LEFT           = 1;
        RIGHT          = 2;
        SLIGHT_LEFT    = 3;
        SLIGHT_RIGHT   = 4;
        U_TURN         = 5;
    }

    /*
    The integer ID of the :obj:`LaneSegment`
    */
    required uint64     id              = 1;

    /*
    The type of lane
    */
    required LaneType   type            = 2;

    /*
    The direction of the lane when traversed in the same order as the points in :attr:`left_edge`, :attr:`right_edge`
    and :attr:`reference_line`.
    */
    required Direction  direction       = 3;

    /*
    The integer ID of the :obj:`RoadSegment` that a :obj:`LaneSegment` corresponds to
    */
    required uint64     road            = 4;

    /*
    The integer ID of the :obj:`Edge` that defines the left edge of the :obj:`LaneSegment`
    */
    required uint64     left_edge       = 5;

    /*
    The integer ID of the :obj:`Edge` that defines the right edge of the :obj:`LaneSegment`
    */
    required uint64     right_edge      = 6;

    /*
    The integer ID of the :obj:`Edge` that defines the center reference line of the :obj:`LaneSegment`
    */
    required uint64     reference_line  = 7;

    /*
    The :obj:`LaneSegment` that connects to the beginning of the current :obj:`LaneSegment`
    */
    repeated uint64     predecessors    = 8;

    /*
    The :obj:`LaneSegment` that connects to the end of the current :obj:`LaneSegment`
    */
    repeated uint64     successors      = 9;

    /*
    The :obj:`LaneSegment` that is the left neighbor of the current :obj:`LaneSegment`. Left is defined relative
    to the forward direction of travel in the :obj:`LaneSegment`.
    */
    optional uint64     left_neighbor   = 10;

    /*
    The :obj:`LaneSegment` that is the right neighbor of the current :obj:`LaneSegment`. Right is defined relative
    to the forward direction of travel in the :obj:`LaneSegment`.
    */
    optional uint64     right_neighbor  = 11;

    /*
    The angle between the direction of the :obj:`LaneSegment` and North
    */
    optional double     compass_angle   = 12;

    /*
    Angle between the incoming and outgoing directions of the :obj:`LaneSegment` if the :obj:`LaneSegment` is a turn
    lane
     */
    optional double     turn_angle      = 13;

    /*
    The type of turn that the :obj:`LaneSegment` corresponds to if :obj:`LaneSegment` is a turn lane.
    */
    optional TurnType   turn_type       = 15;

    /*
    Optional information about the :obj:`LaneSegment`
    */
    optional string     user_data       = 14;
}

/*
A road object within the UMD world
*/
message RoadSegment
{
    /*
    All possible road types
    */
    enum RoadType
    {
        MOTORWAY        = 0;
        TRUNK           = 1;
        PRIMARY         = 2;
        SECONDARY       = 3;
        TERTIARY        = 4;
        UNCLASSIFIED    = 5;
        RESIDENTIAL     = 6;
        MOTORWAY_LINK   = 7;
        TRUNK_LINK      = 8;
        PRIMARY_LINK    = 9;
        SECONDARY_LINK  = 10;
        TERTIARY_LINK   = 11;
        SERVICE         = 12;
        DRIVEWAY        = 13;
        PARKING_AISLE   = 14;
        DRIVEWAY_PARKING_ENTRY = 15;
    }

    /*
    All possible ground types that an :obj:`RoadSegment` can exist on
    */
    enum GroundType
    {
        GROUND          = 0;
        BRIDGE          = 1;
        TUNNEL          = 2;
    }

    /*
    The integer ID of the :obj:`RoadSegment`
    */
    required uint64 id     = 1;

    /*
    The name of the :obj:`RoadSegment`
    */
    required string name   = 2;

    /*
    The integer ID of the :obj:`RoadSegment` that connects to the beginning of the current :obj:`RoadSegment`
    */
    repeated uint64     predecessors    = 3;

    /*
    The integer ID of the :obj:`RoadSegment` that connects to the edn of the current :obj:`RoadSegment`
    */
    repeated uint64     successors      = 4;

    /*
    The integer ID of the :obj:`LaneSegment` that make up this :obj:`RoadSegment`
    */
    repeated uint64     lane_segments   = 5;

    /*
    The integer ID of the :obj:`Edge` that defines the center reference line of the :obj:`RoadSegment`
    */
    optional uint64     reference_line  = 6; // Edge

    /*
    The type of the current :obj:`RoadSegment`
    */
    optional RoadType   type            = 8;

    /*
    The ground type on which the :obj:`RoadSegment` exists
    */
    optional GroundType ground_type     = 11;

    /*
    The speed limit of the :obj:`RoadSegment`
    */
    optional SpeedLimit speed_limit     = 10;

    /*
    The integer ID of the junction that exists on the road if the :obj:`RoadSegment` contains a :obj:`Junction`
    */
    optional uint64     junction_id     = 9;

    /*
    Optional information about the :obj:`RoadSegment`
    */
    optional string     user_data       = 7;
}

/*
Defines the speed limit of a :obj:`RoadSegment`
*/
message SpeedLimit
{
    /*
    All possible types for units of the speed limit
    */
    enum SpeedUnits
    {
        MILES_PER_HOUR      = 0;
        KILOMETERS_PER_HOUR = 1;
    }

    /*
    The speed limit in units defined by :attr:`SpeedUnits`
    */
    required uint32 speed       = 1;

    /*
    The units that the :attr:`speed` is in
    */
    required SpeedUnits units   = 2;
}

/*
An area of the UMD map
*/
message Area
{
    /*
    All possible types that an :obj:`Area` can be
    */
    enum AreaType
    {
        BUILDING_COMMERCIAL     = 0;
        BUILDING_RESIDENTIAL    = 1;
        BUILDING_INDUSTRIAL     = 2;
        BUILDING_HOUSE          = 3;
        BUILDING_APARTMENT      = 8;
        BUILDING_GARAGE         = 9;
        BUILDING_GAS            = 10;
        BUILDING_PARKING        = 11;
        BUILDING_OFFICE         = 12;
        BUILDING_RETAIL         = 13;
        BUILDING_SCHOOL         = 14;
        BUILDING_WAREHOUSE      = 15;
        BUILDING_UNCLASSIFIED   = 29;
        EMPTY_LOT               = 7;
        PARKING_LOT             = 4;
        PARKING_SPACE           = 5;
        PARK                    = 6;
        POWER                   = 18;
        RAIL                    = 19;
        SIDEWALK                = 17;
        UNCLASSIFIED            = 16;
        WATER                   = 20;
		ZONE_BROWN			    = 21;
        ZONE_COMMERCIAL		    = 22;
        ZONE_GREEN			    = 23;
        ZONE_INDUSTRIAL		    = 24;
        ZONE_RESIDENTIAL	    = 25;
        ZONE_RETAIL 		    = 26;
        ZONE_WATER			    = 27;
        SPEEDBUMP               = 28;
        CONSTRUCTION            = 30;
        YARD					= 31;
    }

    /*
    The id of the :obj:`Area`
    */
    required uint64     id          = 1;

    /*
    The type of the :obj:`Area`
    */
    required AreaType   type        = 2;

    /*
    The :obj:`Edge` that defines the boundary of the :obj:`Area`. Can be more than one.
    */
    repeated uint64     edges       = 3;

    /*
    The height of the area in meters. Used for areas that define buildings.
    */
    optional float      height      = 4;

    /*
    The number of floors in an area when the :obj:`Area` defines a building.
    */
    optional uint32     floors      = 6;

    /*
    Optional information about an :obj:`Area`
    */
    optional string     user_data   = 5;
}

/*
A grid that exists across the entire UMD map. Used to map what exists in each part of the grid on the map
*/
message ZoneGrid
{
    /*
    All possible zone types that can exist in each cell of the :obj:`ZoneGrid`
    */
    enum ZoneType
    {
        COMMERCIAL      = 0;
        RETAIL          = 1;
        INDUSTRIAL      = 2;
        RESIDENTIAL     = 3;
        PARKING         = 4;
        WATER           = 5; // Zones such as bays, rivers, ponds, lakes, etc.
        GREEN           = 6; // Zones such as parks, grass, forest, etc.
        BROWN           = 7; // Zones such as beaches, dirt, sand, etc.
        UNCLASSIFIED    = 8;
    }

    /*
    Point that represents the upper right corner of the :obj:`ZoneGrid`
    */
    required Point_ENU bound_NE     = 1;

    /*
    Point that represents the lower left corner of the :obj:`ZoneGrid`
    */
    required Point_ENU bound_SW     = 2;

    /*
    The number of examples that exist in the latitudinal direction of the :obj:`ZoneGrid`
    */
    required uint32    lat_samples  = 3;

    /*
    The number of examples that exist in the longitudinal direction of the :obj:`ZoneGrid`
    */
    required uint32    lon_samples  = 4;

    /*
    List of all the points in the :obj:`ZoneGrid`, the value of which is the :attr:`ZoneType` at each point.
    */
    repeated ZoneType  points       = 5;
}

/*
Information about traffic signs in a UMD map.
*/
message TrafficSignData
{
    /*
    All possible types of signs that can exist
    */
    enum SignType
    {
        REGULATORY_STOP_YIELD_PEDESTRIAN_CROSSING                   = 0;
        REGULATORY_SPEED_REGULATION                                 = 1;
        REGULATORY_TURN_AND_LANE_USE                                = 2;
        REGULATORY_MOVEMENT_REGULATION                              = 3;
        REGULATORY_SELECTIVE_EXCLUSION                              = 4;
        REGULATORY_ONE_WAY_DIVIDED_HIGHWAY_ROUNDABOUT               = 5;
        REGULATORY_PARKING_REGULATION                               = 6;
        REGULATORY_PARKING_PROHIBITION_EMERGENCY_RESTRICTION_RAIL   = 7;
        REGULATORY_PEDESTRIAN_BICYCLE_EQUESTRIAN                    = 8;
        REGULATORY_TRAFFIC_SIGNAL                                   = 9;
        REGULATORY_ROAD_CLOSURE                                     = 10;
        REGULATORY_WEIGHT_LIMIT                                     = 11;
        REGULATORY_WEIGH_STATION                                    = 12;
        REGULATORY_TRUCK_ROUTE                                      = 13;
        REGULATORY_RAILROAD_AND_LIGHT_RAIL                          = 14;
        REGULATORY_SEATBELT_CRASH_CLEARANCE_HEADLIGHT_USE           = 15;
        WARNING_TURN_AND_CURVE                                      = 16;
        WARNING_INTERSECTION                                        = 17;
        WARNING_ADVANCE_TRAFFIC_CONTROL                             = 18;
        WARNING_MERGE_AND_LANE_TRANSITION                           = 19;
        WARNING_WIDTH_RESTRICTION                                   = 20;
        WARNING_DIVIDED_HIGHWAY                                     = 21;
        WARNING_HILL                                                = 22;
        WARNING_PAVEMENT_CONDITION                                  = 23;
        WARNING_LANE_TRANSITION                                     = 24;
        WARNING_RAILROAD_AND_LIGHT_RAIL                             = 25;
        WARNING_ADVANCE_WARNING_CROSSING                            = 26;
        WARNING_LOW_CLEARANCE                                       = 27;
        WARNING_ADVISORY_SPEED                                      = 28;
        WARNING_DEAD_END_NO_OUTLET_NO_PASSING                       = 29;
        WARNING_PLAYGROUND                                          = 30;
        WARNING_SUPPLEMENTAL_PLAQUES                                = 31;
        WARNING_SPEED_HUMP                                          = 32;
        WARNING_NO_TRAFFIC_SIGNS                                    = 33;
        WARNING_WORK_ZONE                                           = 34;
        WARNING_ROAD_WORK                                           = 35;
        WARNING_BLASTING                                            = 36;
        WARNING_SLOW_TRAFFIC                                        = 37;
        WARNING_DOUBLE_REVERSE_CURVE                                = 38;
        WARNING_YELLOW_TRAP                                         = 39;
        MARKER_ROUTE_MARKERS                                        = 40;
        MARKER_JUNCTION_SIGNS                                       = 41;
        MARKER_CARDINAL_DIRECTIONAL_AUXILLARIES                     = 42;
        MARKER_ALTERNATIVE_ROUTE_SIGNS                              = 43;
        MARKER_ADVANCE_TURN_AUXILLARIES                             = 44;
        MARKER_DIRECTIONAL_ARROW_AUXILLARIES                        = 45;
        MARKER_DIRECTIONAL_ARROW_AUXILLARIES_BICYCLE                = 46;
        GUIDE_DESTINATION                                           = 47;
        GUIDE_DISTANCE                                              = 48;
        GUIDE_STREET_NAME                                           = 49;
        GUIDE_PARKING                                               = 50;
        GUIDE_REST_AREA                                             = 51;
        GUIDE_SCENIC                                                = 52;
        GUIDE_RECREATIONAL                                          = 53;
        GUIDE_WEIGH_STATION                                         = 54;
        GUIDE_GENERAL_SERVICES                                      = 55;
        GUIDE_REFERENCE_LOCATION_MILEPOSTS                          = 56;
        GUIDE_BICYCLE                                               = 57;
        GUIDE_GENERAL_INFORMATION                                   = 58;
        GUIDE_CROSSOVER_FREEWAY_ENTRANCE                            = 59;
        GUIDE_EXPRESSWAY_AND_FREEWAY                                = 60;
        GUIDE_WORK_ZONE_INFORMATION                                 = 61;
        GUIDE_RECREATIONAL_AND_CULTURAL_INTEREST                    = 62;
        CULTURAL_INTEREST_GENERAL_INFORMATION                       = 63;
        CULTURAL_INTEREST_TRAVELER_SERVICES                         = 64;
        CULTURAL_INTEREST_ACCOMMODATION_SERVICES                    = 65;
        CULTURAL_INTEREST_LAND_RECREATION                           = 66;
        CULTURAL_INTEREST_WATER_RECREATION                          = 67;
        CULTURAL_INTEREST_WINTER_RECREATION                         = 68;
        OBJECT_MARKER                                               = 69;
        BICYCLE_FACILITIES                                          = 70;
        SCHOOL                                                      = 71;
        EMERGENCY_MANAGEMENT_CIVIL_DEFENSE                          = 72;
    }

    /*
    Data about the traffic sign.
    */
    oneof data
    {
        /*
        The type of the sign
        */
        SignType    type        = 1;

        /*
        The code that represents the content of the sign.
        */
        string      sign_code   = 2;

        /*
        The "value" that is shown on the rendered sign (e.g. in a speed limit sign).
        */
        uint32      face_value  = 3;

        /*
        The "text" that is shown on the rendered sign (e.g. in a direction sign).
        */
        string      face_text   = 4;

        /*
        The name of the sign asset.
        */
        string      asset_name  = 5;
    }
}

/*
Information about traffic lights that exist in the UMD map.
*/
message TrafficLightData
{
    /*
    The integer ID of the junction to which the Traffic Light belongs.
    */
    required uint64 signaled_intersection_id    = 1;

    /*
    A list of bulbs that exist on the traffic light.
    */
    repeated TrafficLightBulb bulbs             = 2;

    /*
    An optional reference to the asset name of this traffic light box.
    */
    optional string asset_name                  = 3;
}

/*
Information about the bulbs that exist in traffic lights.
*/
message TrafficLightBulb
{
    /*
    All possible shapes of traffic light bulbs.
    */
    enum Shape
    {
        CIRCLE                  = 0;
        ARROW_LEFT              = 1;
        ARROW_LEFT_DIAGONAL     = 2;
        ARROW_RIGHT             = 3;
        ARROW_RIGHT_DIAGONAL    = 4;
        ARROW_UP                = 6;
        ARROW_DOWN              = 7;
        U_TURN                  = 5;
        BICYCLE                 = 8;
        WALK                    = 9;
        DONT_WALK               = 10;
        NUMBER                  = 11;
    }

    /*
    All possible colors that a traffic light bulb can have.
    */
    enum Color
    {
        RED     = 0;
        YELLOW  = 1;
        GREEN   = 2;
    }

    /*
    The shape of the traffic light bulb
    */
    required Shape shape        = 1;

    /*
    The color of the traffic light bulb
    */
    required Color color        = 2;

    /*
    The integer ID of the phase of the traffic light signal (e.g. red vs green etc).
    */
    required uint64 phase_id    = 3;

    /*
    Boolean flag to show whether or not the traffic light bulb is flashing
    */
    optional bool is_flashing   = 4;
}

/*
Information about props that exist in the UMD map.
*/
message PropData
{
    /*
    All possible types that a prop can be
    */
    enum PropType
    {
        VEHICLE         = 0;
        TERRAIN_NATURAL = 1;
        VEGETATION_HIGH = 2;
        VEGETATION_LOW  = 3;
        BUILDING        = 4;
        HARDSCAPE       = 5;
        BARRIER         = 6;
        POLE            = 7;
        OTHER           = 8;
    }

    /*
    Data about what type of prop is represented.
    */
    oneof data
    {
        /*
        The type of the prop
        */
        PropType    type        = 1;

        /*
        The name of the asset represented by the prop.
        */
        string      asset_name  = 2;
    }
}

/*
An object that exists in the UMD map.
*/
message Object
{
    /*
    The integer ID of the :obj:`Object`
    */
    required uint64         id                  = 1;

    /*
    The orientation of the :obj:`Object`
    */
    required Quaternion     orientation         = 3;

    /*
    Information which stores where the :obj:`Object` is placed in the UMD map.
    */
    oneof placement
    {
        /*
        The point on which the :obj:`Object` is placed.
        */
        Point_ENU           origin              = 2;

        /*
        The bounding box that encapsulates the :obj:`Object`.
        */
        AABB                bounding_box        = 4;
    }

    /*
    Information about the :obj:`Object`.
    */
    oneof data
    {
        /*
        Data about the traffic sign if the :obj:`Object` is a traffic sign.
        */
        TrafficSignData     traffic_sign_data   = 5;

        /*
        Data about the traffic light if the :obj:`Object` is a traffic light.
        */
        TrafficLightData    traffic_light_data  = 6;

        /*
        Data about the prop if the :obj:`Object` is a prop.
        */
        PropData            prop_data           = 7;
    }

    /*
    The radius around the :obj:`Object` in which other :obj:`Object` should not be placed.
    */
    optional float          exclusion_radius    = 8 [default = -1];

    /*
    Optional information about the :obj:`Object`
    */
    optional string         user_data           = 9;
}

/*
A junction that exists in the UMD map.
*/
message Junction
{
    /*
    The integer ID of the :obj:`Junction`
    */
    required uint64 id                      = 1;

    /*
    List of :obj:`LaneSegment`s that connect to the :obj:`Junction`.
    */
    repeated uint64 lane_segments           = 2;

    /*
    List of :obj:`RoadSegment`s that connect to the :obj:`Junction`.
    */
    repeated uint64 road_segments           = 3;

    /*
    Integer ID of the signaled intersection that controls this :obj:`Junction` if the :obj:`Junction` is a signaled
    intersection
    */
    optional uint64 signaled_intersection   = 6;

    /*
    Optional information about the :obj:`Junction`.
    */
    optional string user_data               = 7;

    /*
    List of integer IDs of the :obj:`Edge` objects that define the corners of the :obj:`Junction`.
    */
    repeated uint64 corners                 = 8;

    /*
    List of the integer IDs of the  :obj:`LaneSegment` objects that define the crosswalks on the :obj:`Junction`
     */
    repeated uint64 crosswalk_lanes         = 9;

    /*
    Integer ID of the signed intersection that controls this :obj:`Junction` if the :obj:`Junction` is a signed
    intersection
    */
    optional uint64 signed_intersection     = 10;
}

/*
Markings that exist on the road to separate :obj:`LaneSegment`s
 */
message RoadMarking
{
    /*
    All possible types of :obj:`RoadMarking`.
    */
    enum Type
    {
        SOLID         = 0;
        DASHED        = 1;
        SOLID_SOLID   = 2; // for double solid line
        SOLID_DASHED  = 3; // from left to right, note this is different from ODR spec
        DASHED_SOLID  = 4; // from left to right, note this is different from ODR spec
        DASHED_DASHED = 5; // for double dashed line
        BOTTS_DOTS    = 6; // For these three, we can specify as a RoadMark or should they be captured elsewhere
        NO_PAINT      = 7;
    }

    /*
    All possible colors that a :obj:`RoadMarking` can be.
    */
    enum Color
    {
        WHITE  = 0;
        BLUE   = 1;
        GREEN  = 2;
        RED    = 3;
        YELLOW = 4;
    }

    /*
    The integer ID of the :obj:`RoadMarking`.
    */
    required uint64 id              = 1;

    /*
    The integer ID of the :obj:`Edge` that defines the line on which the :obj:`RoadMarking` exists.
    */
    required uint64 edge_id         = 2;

    /*
    The width of the :obj:`RoadMarking` in meters.
    */
    required float width            = 3;

    /*
    The type of the :obj:`RoadMarking`.
    */
    optional Type type              = 4;

    /*
    The color of the :obj:`RoadMarking`.
    */
    optional Color color            = 5;

    /*
    The length in meters of the dashes on the :obj:`RoadMarking` if the :obj:`RoadMarking` is dashed.
    */
    optional float dash_length      = 7;

    /*
    The length of the separation between dashes in meters on the :obj:`RoadMarking` if the :obj:`RoadMarking` is dashed.
    */
    optional float dash_separation  = 8;

    /*
    Boolean flag to denote whether or not the :obj:`RoadMarking` is a stop line.
    */
    optional bool is_stopline       = 9;
}

/*
The state of a Traffic Light
*/
message SignalOnset
{
    /*
    All possible states of the signal.
    */
    enum SignalState
    {
        red    = 0;
        yellow = 1;
        green  = 2;
    }

    /*
    All possible logical states of the signal.
    */
    enum LogicalState
    {
        inactive        = 0;
        red_solid       = 1;
        red_flashing    = 2;
        yellow_solid    = 3;
        yellow_flashing = 4;
        green_solid     = 5;
        green_flashing  = 6;
    }

    /*
    The time in seconds until the :attr:`signal_state` activates.
    */
    required double onset              = 1;

    /*
    The type of signal state.
    */
    required SignalState signal_state  = 2;

    /*
    The logical state of the traffic signal.
    */
    optional LogicalState logical_state = 3;
}

/*
The phase of a :obj:`TrafficLightBulb`.
*/
message Phase
{
    /*
    The integer ID of the phase.
    */
    required uint64 id                     = 1;

    /*
    The signal state that is about to activate.
    */
    repeated SignalOnset phase_timing      = 2;

    /*
    The integer IDs of the :obj:`LaneSegment` objects that are controlled by this :obj:`TrafficLightBulb`.
    */
    repeated uint64 controlled_lanes       = 3;
}

/*
An intersection that is controlled by a signal.
*/
message SignaledIntersection
{
    /*
    The integer ID of the intersection.
    */
    required uint64 id                      = 1;

    /*
    The :obj:`Junction` that is controlled by the signaled intersection.
    */
    required uint64 junction                = 2;

    /*
    The timings of phases in the intersection.
    */
    repeated Phase phase_timings            = 3;

    /*
    The cycle time of the :attr:`phase_timings`.
    */
    required double cycle_time              = 4;
}

/*
An intersection that is controlled by a sign.
*/
message SignedIntersection
{
    /*
    The integer ID of the intersection.
    */
    required uint64 id                      = 1;

    /*
    The :obj:`Junction` that is controlled by the signaled intersection.
    */
    required uint64 junction                = 2;

    /*
    The integer IDs of :obj:`LaneSegment` objects that are controlled by a stop sign.
    */
    repeated uint64 stop_sign_lane_ids      = 3;

    /*
    The integer IDs of :obj:`LaneSegment` objects that are controlled by a yield sign.
    */
    repeated uint64 yield_sign_lane_ids     = 4;
}

/*
Wrapper message for a UMD map and all its constituent parts.
*/
message UniversalMap
{
    /*
    Information about the UMD map.
    */
    required    Info                    info                            = 1;

    /*
    All :obj:`RoadSegment` objects in the UMD map.
    */
    map<uint64, RoadSegment>            road_segments                   = 2;

    /*
    All :obj:`LaneSegment` objects in the UMD map.
    */
    map<uint64, LaneSegment>            lane_segments                   = 3;

    /*
    All :obj:`Area` objects in the UMD map.
    */
    map<uint64, Area>                   areas                           = 4;

    /*
    All :obj:`Object` objects in the UMD map.
    */
    map<uint64, Object>                 objects                         = 5;

    /*
    All :obj:`Edge` objects in the UMD map.
    */
    map<uint64, Edge>                   edges                           = 6;

    /*
    All :obj:`Junction` objects in the UMD map.
    */
    map<uint64, Junction>               junctions                       = 7;

    /*
    All :obj:`RoadMarking` objects in the UMD map.
    */
    map<uint64, RoadMarking>            road_markings                   = 9;

    /*
    All :obj:`SignaledIntersection` objects in the UMD map.
    */
    map<uint64, SignaledIntersection>   signaled_intersections          = 10;

    /*
    All :obj:`SignedIntersection` objects in the UMD map.
    */
    map<uint64, SignedIntersection>     signed_intersections            = 12;

    /*
    The :obj:`ZoneGrid` objects of the UMD Map.
     */
    optional    ZoneGrid                zone_grid                       = 11;
}
