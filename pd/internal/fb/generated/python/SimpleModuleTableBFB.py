# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class SimpleModuleTableBFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSimpleModuleTableBFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SimpleModuleTableBFB()
        x.Init(buf, n + offset)
        return x

    # SimpleModuleTableBFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SimpleModuleTableBFB
    def B(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # SimpleModuleTableBFB
    def BAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # SimpleModuleTableBFB
    def BLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SimpleModuleTableBFB
    def C(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SimpleModuleTableBFB
    def D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SimpleModuleTableBFBStart(builder): builder.StartObject(3)
def SimpleModuleTableBFBAddB(builder, b): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(b), 0)
def SimpleModuleTableBFBStartBVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SimpleModuleTableBFBAddC(builder, c): builder.PrependFloat32Slot(1, c, 0.0)
def SimpleModuleTableBFBAddD(builder, d): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(d), 0)
def SimpleModuleTableBFBEnd(builder): return builder.EndObject()
