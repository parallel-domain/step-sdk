# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class SignedIntersectionModuleOutputFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSignedIntersectionModuleOutputFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SignedIntersectionModuleOutputFB()
        x.Init(buf, n + offset)
        return x

    # SignedIntersectionModuleOutputFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SignedIntersectionModuleOutputFB
    def VehicleQueue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SignedIntersectionModuleOutputFB
    def VehicleQueueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # SignedIntersectionModuleOutputFB
    def VehicleQueueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SignedIntersectionModuleOutputFB
    def ReadyQueue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SignedIntersectionModuleOutputFB
    def ReadyQueueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # SignedIntersectionModuleOutputFB
    def ReadyQueueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SignedIntersectionModuleOutputFB
    def OccupiedLanes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # SignedIntersectionModuleOutputFB
    def OccupiedLanesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # SignedIntersectionModuleOutputFB
    def OccupiedLanesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SignedIntersectionModuleOutputFB
    def AgentStates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AgentIntersectionStatusFB import AgentIntersectionStatusFB
            obj = AgentIntersectionStatusFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SignedIntersectionModuleOutputFB
    def AgentStatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def SignedIntersectionModuleOutputFBStart(builder): builder.StartObject(4)
def SignedIntersectionModuleOutputFBAddVehicleQueue(builder, vehicleQueue): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vehicleQueue), 0)
def SignedIntersectionModuleOutputFBStartVehicleQueueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SignedIntersectionModuleOutputFBAddReadyQueue(builder, readyQueue): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(readyQueue), 0)
def SignedIntersectionModuleOutputFBStartReadyQueueVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SignedIntersectionModuleOutputFBAddOccupiedLanes(builder, occupiedLanes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(occupiedLanes), 0)
def SignedIntersectionModuleOutputFBStartOccupiedLanesVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def SignedIntersectionModuleOutputFBAddAgentStates(builder, agentStates): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(agentStates), 0)
def SignedIntersectionModuleOutputFBStartAgentStatesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SignedIntersectionModuleOutputFBEnd(builder): return builder.EndObject()
