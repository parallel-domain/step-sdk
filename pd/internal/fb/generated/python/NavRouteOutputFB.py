# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NavRouteOutputFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNavRouteOutputFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NavRouteOutputFB()
        x.Init(buf, n + offset)
        return x

    # NavRouteOutputFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NavRouteOutputFB
    def CurrentLane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LanePoseFB import LanePoseFB
            obj = LanePoseFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NavRouteOutputFB
    def Segments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NavRouteSegmentFB import NavRouteSegmentFB
            obj = NavRouteSegmentFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NavRouteOutputFB
    def SegmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NavRouteOutputFBStart(builder): builder.StartObject(2)
def NavRouteOutputFBAddCurrentLane(builder, currentLane): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(currentLane), 0)
def NavRouteOutputFBAddSegments(builder, segments): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(segments), 0)
def NavRouteOutputFBStartSegmentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NavRouteOutputFBEnd(builder): return builder.EndObject()
