# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EventNonDrivableRoadFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventNonDrivableRoadFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventNonDrivableRoadFB()
        x.Init(buf, n + offset)
        return x

    # EventNonDrivableRoadFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventNonDrivableRoadFB
    def Locations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # EventNonDrivableRoadFB
    def LocationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EventNonDrivableRoadFBStart(builder): builder.StartObject(1)
def EventNonDrivableRoadFBAddLocations(builder, locations): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(locations), 0)
def EventNonDrivableRoadFBStartLocationsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def EventNonDrivableRoadFBEnd(builder): return builder.EndObject()
