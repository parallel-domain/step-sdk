# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PlanPointFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlanPointFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlanPointFB()
        x.Init(buf, n + offset)
        return x

    # PlanPointFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlanPointFB
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlanPointFB
    def Heading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlanPointFB
    def DistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def MaxSpeedMps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def AccelMinMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def AccelMaxMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def JerkMinMps3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def JerkMaxMps3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def LeftObstacleDistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def RightObstacleDistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanPointFB
    def Gear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # PlanPointFB
    def LanePose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LanePoseFB import LanePoseFB
            obj = LanePoseFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlanPointFB
    def SpeedRequests(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .SpeedRequestFB import SpeedRequestFB
            obj = SpeedRequestFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PlanPointFB
    def SpeedRequestsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PlanPointFBStart(builder): builder.StartObject(13)
def PlanPointFBAddPosition(builder, position): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def PlanPointFBAddHeading(builder, heading): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(heading), 0)
def PlanPointFBAddDistanceM(builder, distanceM): builder.PrependFloat32Slot(2, distanceM, 0.0)
def PlanPointFBAddMaxSpeedMps(builder, maxSpeedMps): builder.PrependFloat32Slot(3, maxSpeedMps, 0.0)
def PlanPointFBAddAccelMinMps2(builder, accelMinMps2): builder.PrependFloat32Slot(4, accelMinMps2, 0.0)
def PlanPointFBAddAccelMaxMps2(builder, accelMaxMps2): builder.PrependFloat32Slot(5, accelMaxMps2, 0.0)
def PlanPointFBAddJerkMinMps3(builder, jerkMinMps3): builder.PrependFloat32Slot(6, jerkMinMps3, 0.0)
def PlanPointFBAddJerkMaxMps3(builder, jerkMaxMps3): builder.PrependFloat32Slot(7, jerkMaxMps3, 0.0)
def PlanPointFBAddLeftObstacleDistanceM(builder, leftObstacleDistanceM): builder.PrependFloat32Slot(8, leftObstacleDistanceM, 0.0)
def PlanPointFBAddRightObstacleDistanceM(builder, rightObstacleDistanceM): builder.PrependFloat32Slot(9, rightObstacleDistanceM, 0.0)
def PlanPointFBAddGear(builder, gear): builder.PrependInt8Slot(10, gear, 0)
def PlanPointFBAddLanePose(builder, lanePose): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(lanePose), 0)
def PlanPointFBAddSpeedRequests(builder, speedRequests): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(speedRequests), 0)
def PlanPointFBStartSpeedRequestsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def PlanPointFBEnd(builder): return builder.EndObject()
