# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LiDARConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLiDARConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LiDARConfigFB()
        x.Init(buf, n + offset)
        return x

    # LiDARConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LiDARConfigFB
    def BeamData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LiDARBeamFB import LiDARBeamFB
            obj = LiDARBeamFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LiDARConfigFB
    def BeamDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LiDARConfigFB
    def SampleRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def RotationRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def AzimuthMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def AzimuthMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def ElevationDelta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def CaptureRgb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureNormals(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureSegmentation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureInstances(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureMotionvectors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # LiDARConfigFB
    def MinimumRangeCutoff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 15.0

    # LiDARConfigFB
    def MaximumRangeCutoff(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 235.0

    # LiDARConfigFB
    def MinimumCutoffProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.07

    # LiDARConfigFB
    def MaximumCutoffProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.95

    # LiDARConfigFB
    def MinimumOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.002

    # LiDARConfigFB
    def MaximumOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.02

    # LiDARConfigFB
    def MinimumNoise(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.001

    # LiDARConfigFB
    def RangeNoiseMean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def RangeNoiseStddev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.005

    # LiDARConfigFB
    def IntensityParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LiDARIntensityParamsFB import LiDARIntensityParamsFB
            obj = LiDARIntensityParamsFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LiDARConfigFB
    def AliceLidarModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .AliceLiDARModelFB import AliceLiDARModelFB
            obj = AliceLiDARModelFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LiDARConfigFB
    def Pattern(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # LiDARConfigFB
    def TimeOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARConfigFB
    def MultiReturns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def MergeReturns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureProperties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def CaptureBackwardmotionvectors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # LiDARConfigFB
    def MultiReturnsAngle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.00035

    # LiDARConfigFB
    def CaptureIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def LiDARConfigFBStart(builder): builder.StartObject(31)
def LiDARConfigFBAddBeamData(builder, beamData): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(beamData), 0)
def LiDARConfigFBStartBeamDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LiDARConfigFBAddSampleRate(builder, sampleRate): builder.PrependFloat32Slot(1, sampleRate, 0.0)
def LiDARConfigFBAddRotationRate(builder, rotationRate): builder.PrependFloat32Slot(2, rotationRate, 0.0)
def LiDARConfigFBAddAzimuthMin(builder, azimuthMin): builder.PrependFloat32Slot(3, azimuthMin, 0.0)
def LiDARConfigFBAddAzimuthMax(builder, azimuthMax): builder.PrependFloat32Slot(4, azimuthMax, 0.0)
def LiDARConfigFBAddElevationDelta(builder, elevationDelta): builder.PrependFloat32Slot(5, elevationDelta, 0.0)
def LiDARConfigFBAddCaptureRgb(builder, captureRgb): builder.PrependBoolSlot(6, captureRgb, 0)
def LiDARConfigFBAddCaptureDepth(builder, captureDepth): builder.PrependBoolSlot(7, captureDepth, 0)
def LiDARConfigFBAddCaptureNormals(builder, captureNormals): builder.PrependBoolSlot(8, captureNormals, 0)
def LiDARConfigFBAddCaptureSegmentation(builder, captureSegmentation): builder.PrependBoolSlot(9, captureSegmentation, 0)
def LiDARConfigFBAddCaptureInstances(builder, captureInstances): builder.PrependBoolSlot(10, captureInstances, 0)
def LiDARConfigFBAddCaptureMotionvectors(builder, captureMotionvectors): builder.PrependBoolSlot(11, captureMotionvectors, 1)
def LiDARConfigFBAddMinimumRangeCutoff(builder, minimumRangeCutoff): builder.PrependFloat32Slot(12, minimumRangeCutoff, 15.0)
def LiDARConfigFBAddMaximumRangeCutoff(builder, maximumRangeCutoff): builder.PrependFloat32Slot(13, maximumRangeCutoff, 235.0)
def LiDARConfigFBAddMinimumCutoffProb(builder, minimumCutoffProb): builder.PrependFloat32Slot(14, minimumCutoffProb, 0.07)
def LiDARConfigFBAddMaximumCutoffProb(builder, maximumCutoffProb): builder.PrependFloat32Slot(15, maximumCutoffProb, 0.95)
def LiDARConfigFBAddMinimumOffset(builder, minimumOffset): builder.PrependFloat32Slot(16, minimumOffset, 0.002)
def LiDARConfigFBAddMaximumOffset(builder, maximumOffset): builder.PrependFloat32Slot(17, maximumOffset, 0.02)
def LiDARConfigFBAddMinimumNoise(builder, minimumNoise): builder.PrependFloat32Slot(18, minimumNoise, 0.001)
def LiDARConfigFBAddRangeNoiseMean(builder, rangeNoiseMean): builder.PrependFloat32Slot(19, rangeNoiseMean, 0.0)
def LiDARConfigFBAddRangeNoiseStddev(builder, rangeNoiseStddev): builder.PrependFloat32Slot(20, rangeNoiseStddev, 0.005)
def LiDARConfigFBAddIntensityParams(builder, intensityParams): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(intensityParams), 0)
def LiDARConfigFBAddAliceLidarModel(builder, aliceLidarModel): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(aliceLidarModel), 0)
def LiDARConfigFBAddPattern(builder, pattern): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(pattern), 0)
def LiDARConfigFBAddTimeOffset(builder, timeOffset): builder.PrependFloat32Slot(24, timeOffset, 0.0)
def LiDARConfigFBAddMultiReturns(builder, multiReturns): builder.PrependInt32Slot(25, multiReturns, 0)
def LiDARConfigFBAddMergeReturns(builder, mergeReturns): builder.PrependInt32Slot(26, mergeReturns, 0)
def LiDARConfigFBAddCaptureProperties(builder, captureProperties): builder.PrependBoolSlot(27, captureProperties, 0)
def LiDARConfigFBAddCaptureBackwardmotionvectors(builder, captureBackwardmotionvectors): builder.PrependBoolSlot(28, captureBackwardmotionvectors, 0)
def LiDARConfigFBAddMultiReturnsAngle(builder, multiReturnsAngle): builder.PrependFloat32Slot(29, multiReturnsAngle, 0.00035)
def LiDARConfigFBAddCaptureIntensity(builder, captureIntensity): builder.PrependBoolSlot(30, captureIntensity, 0)
def LiDARConfigFBEnd(builder): return builder.EndObject()
