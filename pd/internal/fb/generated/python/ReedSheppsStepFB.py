# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ReedSheppsStepFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsReedSheppsStepFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReedSheppsStepFB()
        x.Init(buf, n + offset)
        return x

    # ReedSheppsStepFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReedSheppsStepFB
    def Primitive(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # ReedSheppsStepFB
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ReedSheppsStepFB
    def LengthM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ReedSheppsStepFB
    def StartPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .float2_t import float2_t
            obj = float2_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReedSheppsStepFB
    def StartHeading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .float2_t import float2_t
            obj = float2_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReedSheppsStepFB
    def EndPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .float2_t import float2_t
            obj = float2_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ReedSheppsStepFB
    def EndHeading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from .float2_t import float2_t
            obj = float2_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ReedSheppsStepFBStart(builder): builder.StartObject(7)
def ReedSheppsStepFBAddPrimitive(builder, primitive): builder.PrependInt16Slot(0, primitive, 0)
def ReedSheppsStepFBAddDuration(builder, duration): builder.PrependFloat32Slot(1, duration, 0.0)
def ReedSheppsStepFBAddLengthM(builder, lengthM): builder.PrependFloat32Slot(2, lengthM, 0.0)
def ReedSheppsStepFBAddStartPosition(builder, startPosition): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(startPosition), 0)
def ReedSheppsStepFBAddStartHeading(builder, startHeading): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(startHeading), 0)
def ReedSheppsStepFBAddEndPosition(builder, endPosition): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(endPosition), 0)
def ReedSheppsStepFBAddEndHeading(builder, endHeading): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(endHeading), 0)
def ReedSheppsStepFBEnd(builder): return builder.EndObject()
