# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdSetStateParameters(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdSetStateParameters(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdSetStateParameters()
        x.Init(buf, n + offset)
        return x

    # pdSetStateParameters
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdSetStateParameters
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 1

    # pdSetStateParameters
    def LatencyOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.015

    # pdSetStateParameters
    def LatencyBlend(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.01

    # pdSetStateParameters
    def ClockResetTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 1.0

    # pdSetStateParameters
    def StateRetentionTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 5.0

def pdSetStateParametersStart(builder): builder.StartObject(5)
def pdSetStateParametersAddMode(builder, mode): builder.PrependUint8Slot(0, mode, 1)
def pdSetStateParametersAddLatencyOffset(builder, latencyOffset): builder.PrependFloat64Slot(1, latencyOffset, 0.015)
def pdSetStateParametersAddLatencyBlend(builder, latencyBlend): builder.PrependFloat64Slot(2, latencyBlend, 0.01)
def pdSetStateParametersAddClockResetTime(builder, clockResetTime): builder.PrependFloat64Slot(3, clockResetTime, 1.0)
def pdSetStateParametersAddStateRetentionTime(builder, stateRetentionTime): builder.PrependFloat64Slot(4, stateRetentionTime, 5.0)
def pdSetStateParametersEnd(builder): return builder.EndObject()
