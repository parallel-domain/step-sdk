# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class float4x4_t(object):
    __slots__ = ['_tab']

    # float4x4_t
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # float4x4_t
    def M00(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # float4x4_t
    def M01(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # float4x4_t
    def M02(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # float4x4_t
    def M03(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # float4x4_t
    def M10(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # float4x4_t
    def M11(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
    # float4x4_t
    def M12(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # float4x4_t
    def M13(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # float4x4_t
    def M20(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # float4x4_t
    def M21(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(36))
    # float4x4_t
    def M22(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # float4x4_t
    def M23(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(44))
    # float4x4_t
    def M30(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # float4x4_t
    def M31(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(52))
    # float4x4_t
    def M32(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
    # float4x4_t
    def M33(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))

def Createfloat4x4_t(builder, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33):
    builder.Prep(4, 64)
    builder.PrependFloat32(m33)
    builder.PrependFloat32(m32)
    builder.PrependFloat32(m31)
    builder.PrependFloat32(m30)
    builder.PrependFloat32(m23)
    builder.PrependFloat32(m22)
    builder.PrependFloat32(m21)
    builder.PrependFloat32(m20)
    builder.PrependFloat32(m13)
    builder.PrependFloat32(m12)
    builder.PrependFloat32(m11)
    builder.PrependFloat32(m10)
    builder.PrependFloat32(m03)
    builder.PrependFloat32(m02)
    builder.PrependFloat32(m01)
    builder.PrependFloat32(m00)
    return builder.Offset()
