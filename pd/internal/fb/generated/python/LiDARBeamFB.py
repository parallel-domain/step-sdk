# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LiDARBeamFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLiDARBeamFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LiDARBeamFB()
        x.Init(buf, n + offset)
        return x

    # LiDARBeamFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LiDARBeamFB
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # LiDARBeamFB
    def Azimuth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARBeamFB
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def LiDARBeamFBStart(builder): builder.StartObject(3)
def LiDARBeamFBAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def LiDARBeamFBAddAzimuth(builder, azimuth): builder.PrependFloat32Slot(1, azimuth, 0.0)
def LiDARBeamFBAddElevation(builder, elevation): builder.PrependFloat32Slot(2, elevation, 0.0)
def LiDARBeamFBEnd(builder): return builder.EndObject()
