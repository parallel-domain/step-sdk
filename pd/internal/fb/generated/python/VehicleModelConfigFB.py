# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class VehicleModelConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVehicleModelConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VehicleModelConfigFB()
        x.Init(buf, n + offset)
        return x

    # VehicleModelConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VehicleModelConfigFB
    def VehicleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleModelConfigFB
    def VehicleColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleModelConfigFB
    def VehicleAccessory(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleModelConfigFB
    def VehicleWear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehicleModelConfigFB
    def WheelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleModelConfigFB
    def VehicleActor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleModelConfigFB
    def LockToGround(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # VehicleModelConfigFB
    def GroundOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehicleModelConfigFB
    def WheelCombo(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VehicleModelConfigFB
    def WheelComboLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehicleModelConfigFB
    def WheelComboStyle(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VehicleModelConfigFB
    def WheelComboStyleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehicleModelConfigFB
    def Accessories(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VehicleModelConfigFB
    def AccessoriesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehicleModelConfigFB
    def Occupants(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VehicleModelConfigFB
    def OccupantsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehicleModelConfigFB
    def UserData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleModelConfigFB
    def RandomizeVehicleParts(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # VehicleModelConfigFB
    def VehicleClass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

def VehicleModelConfigFBStart(builder): builder.StartObject(15)
def VehicleModelConfigFBAddVehicleType(builder, vehicleType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vehicleType), 0)
def VehicleModelConfigFBAddVehicleColor(builder, vehicleColor): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(vehicleColor), 0)
def VehicleModelConfigFBAddVehicleAccessory(builder, vehicleAccessory): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vehicleAccessory), 0)
def VehicleModelConfigFBAddVehicleWear(builder, vehicleWear): builder.PrependFloat32Slot(3, vehicleWear, 0.0)
def VehicleModelConfigFBAddWheelType(builder, wheelType): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(wheelType), 0)
def VehicleModelConfigFBAddVehicleActor(builder, vehicleActor): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(vehicleActor), 0)
def VehicleModelConfigFBAddLockToGround(builder, lockToGround): builder.PrependBoolSlot(6, lockToGround, 0)
def VehicleModelConfigFBAddGroundOffset(builder, groundOffset): builder.PrependFloat32Slot(7, groundOffset, 0.0)
def VehicleModelConfigFBAddWheelCombo(builder, wheelCombo): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(wheelCombo), 0)
def VehicleModelConfigFBStartWheelComboVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehicleModelConfigFBAddWheelComboStyle(builder, wheelComboStyle): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(wheelComboStyle), 0)
def VehicleModelConfigFBStartWheelComboStyleVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehicleModelConfigFBAddAccessories(builder, accessories): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(accessories), 0)
def VehicleModelConfigFBStartAccessoriesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehicleModelConfigFBAddOccupants(builder, occupants): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(occupants), 0)
def VehicleModelConfigFBStartOccupantsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehicleModelConfigFBAddUserData(builder, userData): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(userData), 0)
def VehicleModelConfigFBAddRandomizeVehicleParts(builder, randomizeVehicleParts): builder.PrependBoolSlot(13, randomizeVehicleParts, 0)
def VehicleModelConfigFBAddVehicleClass(builder, vehicleClass): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(vehicleClass), 0)
def VehicleModelConfigFBEnd(builder): return builder.EndObject()
