# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class SpeedRequestFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSpeedRequestFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpeedRequestFB()
        x.Init(buf, n + offset)
        return x

    # SpeedRequestFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpeedRequestFB
    def DistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpeedRequestFB
    def SpeedMps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpeedRequestFB
    def AccelMinMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpeedRequestFB
    def AccelMaxMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpeedRequestFB
    def JerkMinMps3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpeedRequestFB
    def JerkMaxMps3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # SpeedRequestFB
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def SpeedRequestFBStart(builder): builder.StartObject(7)
def SpeedRequestFBAddDistanceM(builder, distanceM): builder.PrependFloat32Slot(0, distanceM, 0.0)
def SpeedRequestFBAddSpeedMps(builder, speedMps): builder.PrependFloat32Slot(1, speedMps, 0.0)
def SpeedRequestFBAddAccelMinMps2(builder, accelMinMps2): builder.PrependFloat32Slot(2, accelMinMps2, 0.0)
def SpeedRequestFBAddAccelMaxMps2(builder, accelMaxMps2): builder.PrependFloat32Slot(3, accelMaxMps2, 0.0)
def SpeedRequestFBAddJerkMinMps3(builder, jerkMinMps3): builder.PrependFloat32Slot(4, jerkMinMps3, 0.0)
def SpeedRequestFBAddJerkMaxMps3(builder, jerkMaxMps3): builder.PrependFloat32Slot(5, jerkMaxMps3, 0.0)
def SpeedRequestFBAddType(builder, type): builder.PrependInt8Slot(6, type, 0)
def SpeedRequestFBEnd(builder): return builder.EndObject()
