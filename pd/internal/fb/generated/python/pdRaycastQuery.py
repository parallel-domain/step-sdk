# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdRaycastQuery(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdRaycastQuery(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdRaycastQuery()
        x.Init(buf, n + offset)
        return x

    # pdRaycastQuery
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdRaycastQuery
    def Start(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .pdFloat3 import pdFloat3
            obj = pdFloat3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # pdRaycastQuery
    def StartLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # pdRaycastQuery
    def Direction(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .pdFloat3 import pdFloat3
            obj = pdFloat3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # pdRaycastQuery
    def DirectionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # pdRaycastQuery
    def Distance(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # pdRaycastQuery
    def DistanceAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # pdRaycastQuery
    def DistanceLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def pdRaycastQueryStart(builder): builder.StartObject(3)
def pdRaycastQueryAddStart(builder, start): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(start), 0)
def pdRaycastQueryStartStartVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def pdRaycastQueryAddDirection(builder, direction): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(direction), 0)
def pdRaycastQueryStartDirectionVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def pdRaycastQueryAddDistance(builder, distance): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(distance), 0)
def pdRaycastQueryStartDistanceVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def pdRaycastQueryEnd(builder): return builder.EndObject()
