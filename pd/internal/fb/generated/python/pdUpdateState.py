# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdUpdateState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdUpdateState(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdUpdateState()
        x.Init(buf, n + offset)
        return x

    # pdUpdateState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdUpdateState
    def SimState(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # pdUpdateState
    def SimStateAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # pdUpdateState
    def SimStateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # pdUpdateState
    def StepMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdUpdateState
    def Subscribe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .pdSubscribe import pdSubscribe
            obj = pdSubscribe()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def pdUpdateStateStart(builder): builder.StartObject(4)
def pdUpdateStateAddSimState(builder, simState): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(simState), 0)
def pdUpdateStateStartSimStateVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def pdUpdateStateAddStepMode(builder, stepMode): builder.PrependBoolSlot(2, stepMode, 0)
def pdUpdateStateAddSubscribe(builder, subscribe): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subscribe), 0)
def pdUpdateStateEnd(builder): return builder.EndObject()
