# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class MotionPlanFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMotionPlanFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MotionPlanFB()
        x.Init(buf, n + offset)
        return x

    # MotionPlanFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MotionPlanFB
    def RouteLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MotionPlanFB
    def MotionPath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # MotionPlanFB
    def MotionPathAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # MotionPlanFB
    def MotionPathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MotionPlanFB
    def TargetSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MotionPlanFB
    def LaneSegment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def MotionLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PolyLineFB import PolyLineFB
            obj = PolyLineFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MotionPlanFB
    def LaneChangeState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def LaneChangeLine(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PolyLineFB import PolyLineFB
            obj = PolyLineFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MotionPlanFB
    def LaneChangeStartLane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def LaneChangeEndLane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def LastLaneChangeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MotionPlanFB
    def ObstaclePresent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def ObstacleDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MotionPlanFB
    def ObstacleSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MotionPlanFB
    def WaitTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # MotionPlanFB
    def JunctionLane(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def PlannerMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # MotionPlanFB
    def FreeformPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MotionPlanFB
    def FreeformPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MotionPlanFB
    def FreeformDirections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MotionPlanFB
    def FreeformDirectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MotionPlanFB
    def ReversePoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MotionPlanFB
    def ReversePointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MotionPlanFB
    def ForwardPoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MotionPlanFB
    def ForwardPointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MotionPlanFB
    def ObstacleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def ObstacleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # MotionPlanFB
    def SignaledIntersectionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def MotionPlanFBStart(builder): builder.StartObject(23)
def MotionPlanFBAddRouteLength(builder, routeLength): builder.PrependFloat32Slot(0, routeLength, 0.0)
def MotionPlanFBAddMotionPath(builder, motionPath): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(motionPath), 0)
def MotionPlanFBStartMotionPathVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def MotionPlanFBAddTargetSpeed(builder, targetSpeed): builder.PrependFloat32Slot(2, targetSpeed, 0.0)
def MotionPlanFBAddLaneSegment(builder, laneSegment): builder.PrependUint64Slot(3, laneSegment, 0)
def MotionPlanFBAddMotionLine(builder, motionLine): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(motionLine), 0)
def MotionPlanFBAddLaneChangeState(builder, laneChangeState): builder.PrependInt32Slot(5, laneChangeState, 0)
def MotionPlanFBAddLaneChangeLine(builder, laneChangeLine): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(laneChangeLine), 0)
def MotionPlanFBAddLaneChangeStartLane(builder, laneChangeStartLane): builder.PrependUint64Slot(7, laneChangeStartLane, 0)
def MotionPlanFBAddLaneChangeEndLane(builder, laneChangeEndLane): builder.PrependUint64Slot(8, laneChangeEndLane, 0)
def MotionPlanFBAddLastLaneChangeTime(builder, lastLaneChangeTime): builder.PrependFloat32Slot(9, lastLaneChangeTime, 0.0)
def MotionPlanFBAddObstaclePresent(builder, obstaclePresent): builder.PrependBoolSlot(10, obstaclePresent, 0)
def MotionPlanFBAddObstacleDistance(builder, obstacleDistance): builder.PrependFloat32Slot(11, obstacleDistance, 0.0)
def MotionPlanFBAddObstacleSpeed(builder, obstacleSpeed): builder.PrependFloat32Slot(12, obstacleSpeed, 0.0)
def MotionPlanFBAddWaitTime(builder, waitTime): builder.PrependFloat32Slot(13, waitTime, 0.0)
def MotionPlanFBAddJunctionLane(builder, junctionLane): builder.PrependUint64Slot(14, junctionLane, 0)
def MotionPlanFBAddPlannerMode(builder, plannerMode): builder.PrependInt32Slot(15, plannerMode, 1)
def MotionPlanFBAddFreeformPoints(builder, freeformPoints): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(freeformPoints), 0)
def MotionPlanFBStartFreeformPointsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def MotionPlanFBAddFreeformDirections(builder, freeformDirections): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(freeformDirections), 0)
def MotionPlanFBStartFreeformDirectionsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def MotionPlanFBAddReversePoints(builder, reversePoints): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(reversePoints), 0)
def MotionPlanFBStartReversePointsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def MotionPlanFBAddForwardPoints(builder, forwardPoints): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(forwardPoints), 0)
def MotionPlanFBStartForwardPointsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def MotionPlanFBAddObstacleType(builder, obstacleType): builder.PrependInt16Slot(20, obstacleType, 0)
def MotionPlanFBAddObstacleId(builder, obstacleId): builder.PrependUint64Slot(21, obstacleId, 0)
def MotionPlanFBAddSignaledIntersectionId(builder, signaledIntersectionId): builder.PrependUint64Slot(22, signaledIntersectionId, 0)
def MotionPlanFBEnd(builder): return builder.EndObject()
