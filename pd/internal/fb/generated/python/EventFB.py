# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class EventFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventFB()
        x.Init(buf, n + offset)
        return x

    # EventFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventFB
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EventFB
    def Source(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EventFB
    def Destination(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EventFB
    def FrameIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EventFB
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # EventFB
    def PayloadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EventFB
    def Payload(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

def EventFBStart(builder): builder.StartObject(7)
def EventFBAddEventType(builder, eventType): builder.PrependUint64Slot(0, eventType, 0)
def EventFBAddSource(builder, source): builder.PrependUint64Slot(1, source, 0)
def EventFBAddDestination(builder, destination): builder.PrependUint64Slot(2, destination, 0)
def EventFBAddFrameIndex(builder, frameIndex): builder.PrependUint64Slot(3, frameIndex, 0)
def EventFBAddPriority(builder, priority): builder.PrependUint16Slot(4, priority, 0)
def EventFBAddPayloadType(builder, payloadType): builder.PrependUint64Slot(5, payloadType, 0)
def EventFBAddPayload(builder, payload): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)
def EventFBEnd(builder): return builder.EndObject()
