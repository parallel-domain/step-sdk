# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class NoiseParamsFB(object):
    __slots__ = ['_tab']

    # NoiseParamsFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NoiseParamsFB
    def EnableBayer(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # NoiseParamsFB
    def EnableGaussNoise(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(1))
    # NoiseParamsFB
    def EnablePoissonNoise(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(2))
    # NoiseParamsFB
    def EnableDenoise(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(3))
    # NoiseParamsFB
    def GaussNoiseSigma(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # NoiseParamsFB
    def PoissonNoiseLambda(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # NoiseParamsFB
    def DenoiseFilter(self): return self._tab.Get(flatbuffers.number_types.Uint8Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # NoiseParamsFB
    def DenoiseFilterSize(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # NoiseParamsFB
    def BilateralSigmaD(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
    # NoiseParamsFB
    def BilateralSigmaR(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # NoiseParamsFB
    def EnableAutoNoise(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # NoiseParamsFB
    def SignalAmount(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # NoiseParamsFB
    def PreAmplifierNoise(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(36))
    # NoiseParamsFB
    def PostAmplifierNoise(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # NoiseParamsFB
    def IsUsingIso(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(44))
    # NoiseParamsFB
    def IsoLevel(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # NoiseParamsFB
    def EnableAutoIso(self): return self._tab.Get(flatbuffers.number_types.BoolFlags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(52))
    # NoiseParamsFB
    def Fstop(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
    # NoiseParamsFB
    def MaxExposureTime(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))
    # NoiseParamsFB
    def QuantumEfficiency(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(64))

def CreateNoiseParamsFB(builder, enableBayer, enableGaussNoise, enablePoissonNoise, enableDenoise, gaussNoiseSigma, poissonNoiseLambda, denoiseFilter, denoiseFilterSize, bilateralSigmaD, bilateralSigmaR, enableAutoNoise, signalAmount, preAmplifierNoise, postAmplifierNoise, isUsingIso, isoLevel, enableAutoIso, fstop, maxExposureTime, quantumEfficiency):
    builder.Prep(4, 68)
    builder.PrependFloat32(quantumEfficiency)
    builder.PrependFloat32(maxExposureTime)
    builder.PrependFloat32(fstop)
    builder.Pad(3)
    builder.PrependBool(enableAutoIso)
    builder.PrependInt32(isoLevel)
    builder.Pad(3)
    builder.PrependBool(isUsingIso)
    builder.PrependFloat32(postAmplifierNoise)
    builder.PrependFloat32(preAmplifierNoise)
    builder.PrependInt32(signalAmount)
    builder.Pad(3)
    builder.PrependBool(enableAutoNoise)
    builder.PrependFloat32(bilateralSigmaR)
    builder.PrependFloat32(bilateralSigmaD)
    builder.PrependInt32(denoiseFilterSize)
    builder.Pad(3)
    builder.PrependUint8(denoiseFilter)
    builder.PrependFloat32(poissonNoiseLambda)
    builder.PrependFloat32(gaussNoiseSigma)
    builder.PrependBool(enableDenoise)
    builder.PrependBool(enablePoissonNoise)
    builder.PrependBool(enableGaussNoise)
    builder.PrependBool(enableBayer)
    return builder.Offset()
