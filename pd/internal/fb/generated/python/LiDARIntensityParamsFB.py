# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LiDARIntensityParamsFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLiDARIntensityParamsFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LiDARIntensityParamsFB()
        x.Init(buf, n + offset)
        return x

    # LiDARIntensityParamsFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LiDARIntensityParamsFB
    def RetroRangeNoiseStddev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.1

    # LiDARIntensityParamsFB
    def RetroreflectionNoiseMean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LiDARIntensityParamsFB
    def RetroreflectionNoiseStddev(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.1

    # LiDARIntensityParamsFB
    def MaxAttenuationDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 220.0

    # LiDARIntensityParamsFB
    def RetroIntensityEnhance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.5

    # LiDARIntensityParamsFB
    def IntensitySpecularScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 2.0

    # LiDARIntensityParamsFB
    def IntensityRoughnessScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.5

    # LiDARIntensityParamsFB
    def BeamIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 2.0

    # LiDARIntensityParamsFB
    def AlbedoWeights(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LiDARIntensityParamsFB
    def MaxAlbedo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 2.2

    # LiDARIntensityParamsFB
    def StrongRetroIntensityEnhance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.9

    # LiDARIntensityParamsFB
    def IntensityMetallicScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # LiDARIntensityParamsFB
    def EmissiveGate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 100.0

    # LiDARIntensityParamsFB
    def MaxEmissiveRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 10.0

def LiDARIntensityParamsFBStart(builder): builder.StartObject(14)
def LiDARIntensityParamsFBAddRetroRangeNoiseStddev(builder, retroRangeNoiseStddev): builder.PrependFloat32Slot(0, retroRangeNoiseStddev, 0.1)
def LiDARIntensityParamsFBAddRetroreflectionNoiseMean(builder, retroreflectionNoiseMean): builder.PrependFloat32Slot(1, retroreflectionNoiseMean, 0.0)
def LiDARIntensityParamsFBAddRetroreflectionNoiseStddev(builder, retroreflectionNoiseStddev): builder.PrependFloat32Slot(2, retroreflectionNoiseStddev, 0.1)
def LiDARIntensityParamsFBAddMaxAttenuationDistance(builder, maxAttenuationDistance): builder.PrependFloat32Slot(3, maxAttenuationDistance, 220.0)
def LiDARIntensityParamsFBAddRetroIntensityEnhance(builder, retroIntensityEnhance): builder.PrependFloat32Slot(4, retroIntensityEnhance, 1.5)
def LiDARIntensityParamsFBAddIntensitySpecularScale(builder, intensitySpecularScale): builder.PrependFloat32Slot(5, intensitySpecularScale, 2.0)
def LiDARIntensityParamsFBAddIntensityRoughnessScale(builder, intensityRoughnessScale): builder.PrependFloat32Slot(6, intensityRoughnessScale, 1.5)
def LiDARIntensityParamsFBAddBeamIntensity(builder, beamIntensity): builder.PrependFloat32Slot(7, beamIntensity, 2.0)
def LiDARIntensityParamsFBAddAlbedoWeights(builder, albedoWeights): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(albedoWeights), 0)
def LiDARIntensityParamsFBAddMaxAlbedo(builder, maxAlbedo): builder.PrependFloat32Slot(9, maxAlbedo, 2.2)
def LiDARIntensityParamsFBAddStrongRetroIntensityEnhance(builder, strongRetroIntensityEnhance): builder.PrependFloat32Slot(10, strongRetroIntensityEnhance, 0.9)
def LiDARIntensityParamsFBAddIntensityMetallicScale(builder, intensityMetallicScale): builder.PrependFloat32Slot(11, intensityMetallicScale, 1.0)
def LiDARIntensityParamsFBAddEmissiveGate(builder, emissiveGate): builder.PrependFloat32Slot(12, emissiveGate, 100.0)
def LiDARIntensityParamsFBAddMaxEmissiveRate(builder, maxEmissiveRate): builder.PrependFloat32Slot(13, maxEmissiveRate, 10.0)
def LiDARIntensityParamsFBEnd(builder): return builder.EndObject()
