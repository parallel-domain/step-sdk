# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class SimStateFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSimStateFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SimStateFB()
        x.Init(buf, n + offset)
        return x

    # SimStateFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SimStateFB
    def WorldInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .WorldInfoFB import WorldInfoFB
            obj = WorldInfoFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SimStateFB
    def Agents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AgentStateFB import AgentStateFB
            obj = AgentStateFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SimStateFB
    def AgentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SimStateFB
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SimStateFB
    def Capture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # SimStateFB
    def CurrentTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def SimStateFBStart(builder): builder.StartObject(5)
def SimStateFBAddWorldInfo(builder, worldInfo): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(worldInfo), 0)
def SimStateFBAddAgents(builder, agents): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(agents), 0)
def SimStateFBStartAgentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def SimStateFBAddTime(builder, time): builder.PrependFloat64Slot(2, time, 0.0)
def SimStateFBAddCapture(builder, capture): builder.PrependBoolSlot(3, capture, 1)
def SimStateFBAddCurrentTime(builder, currentTime): builder.PrependFloat64Slot(4, currentTime, 0.0)
def SimStateFBEnd(builder): return builder.EndObject()
