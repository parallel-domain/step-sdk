# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class RoleFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRoleFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RoleFB()
        x.Init(buf, n + offset)
        return x

    # RoleFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RoleFB
    def AgentId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # RoleFB
    def RoleType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

# /// Time and distance when the agent enters this role's agent's path. 
# /// For cases where the other agent is travelling along this agent's path, the arrival time may be
# /// 0 and the departure time (and distance) may be inf. arrival_distance_m will be the initial distance.
    # RoleFB
    def ArrivalTimeS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RoleFB
    def ArrivalDistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RoleFB
    def DepartureTimeS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RoleFB
    def DepartureDistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

# /// Velocity and accel projected onto the heading when the other agent arrives into this agent's path.
    # RoleFB
    def AlongPathVelocityMps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RoleFB
    def AlongPathAccelMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

# /// Cross path velocity and accel is positive left.
    # RoleFB
    def CrossPathVelocityMps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RoleFB
    def CrossPathAccelMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

# /// Speed request target. This includes stop requests. Will be null if there's no request.
    # RoleFB
    def SpeedRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .SpeedRequestFB import SpeedRequestFB
            obj = SpeedRequestFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Lateral offsetting targets. Will be null if there's no request.
    # RoleFB
    def LateralOffsetRequest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .LateralOffsetRequestFB import LateralOffsetRequestFB
            obj = LateralOffsetRequestFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def RoleFBStart(builder): builder.StartObject(12)
def RoleFBAddAgentId(builder, agentId): builder.PrependUint64Slot(0, agentId, 0)
def RoleFBAddRoleType(builder, roleType): builder.PrependInt8Slot(1, roleType, 0)
def RoleFBAddArrivalTimeS(builder, arrivalTimeS): builder.PrependFloat32Slot(2, arrivalTimeS, 0.0)
def RoleFBAddArrivalDistanceM(builder, arrivalDistanceM): builder.PrependFloat32Slot(3, arrivalDistanceM, 0.0)
def RoleFBAddDepartureTimeS(builder, departureTimeS): builder.PrependFloat32Slot(4, departureTimeS, 0.0)
def RoleFBAddDepartureDistanceM(builder, departureDistanceM): builder.PrependFloat32Slot(5, departureDistanceM, 0.0)
def RoleFBAddAlongPathVelocityMps(builder, alongPathVelocityMps): builder.PrependFloat32Slot(6, alongPathVelocityMps, 0.0)
def RoleFBAddAlongPathAccelMps2(builder, alongPathAccelMps2): builder.PrependFloat32Slot(7, alongPathAccelMps2, 0.0)
def RoleFBAddCrossPathVelocityMps(builder, crossPathVelocityMps): builder.PrependFloat32Slot(8, crossPathVelocityMps, 0.0)
def RoleFBAddCrossPathAccelMps2(builder, crossPathAccelMps2): builder.PrependFloat32Slot(9, crossPathAccelMps2, 0.0)
def RoleFBAddSpeedRequest(builder, speedRequest): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(speedRequest), 0)
def RoleFBAddLateralOffsetRequest(builder, lateralOffsetRequest): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(lateralOffsetRequest), 0)
def RoleFBEnd(builder): return builder.EndObject()
