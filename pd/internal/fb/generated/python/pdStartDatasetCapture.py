# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdStartDatasetCapture(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdStartDatasetCapture(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdStartDatasetCapture()
        x.Init(buf, n + offset)
        return x

    # pdStartDatasetCapture
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdStartDatasetCapture
    def DatasetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def ScenarioName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def Desc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def Version(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def Creator(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def StateDataPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def OutputPath(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdStartDatasetCapture
    def NumSettleFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 20

    # pdStartDatasetCapture
    def NumTrimFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 3

    # pdStartDatasetCapture
    def NumSyncFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 20

    # pdStartDatasetCapture
    def OutputTruncated3dAnnotations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def OverrideBoundingBox3dIds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def OutputDepthPointClouds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def OutputSceneDataset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # pdStartDatasetCapture
    def UsePointCacheBounds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def OutputSceneMetadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def PhysicalGroundTruth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def PhysicalGroundTruthRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 250.0

    # pdStartDatasetCapture
    def ForceSignalBulbShape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # pdStartDatasetCapture
    def ForceSignalBulbColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # pdStartDatasetCapture
    def ForceSignalMountDirection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # pdStartDatasetCapture
    def RetainLidarCameraData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def MergeBikesRiders3d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def OutputInstancePointCaches(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def KeepGlassTransparent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def Bbox2dOnlyVisiblePixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def AnnotateWingMirrors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # pdStartDatasetCapture
    def AnnotateWingMirrors3d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # pdStartDatasetCapture
    def RenderEgoVehicle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def HideAllVolumetrics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # pdStartDatasetCapture
    def VolumetricDensityScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # pdStartDatasetCapture
    def UseOpaqueGlass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(68))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def VehicleColorOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(70))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def HideCrosswalkSegmentationMesh(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(72))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def KeepRawLidarData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(74))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # pdStartDatasetCapture
    def AnnotateAccessories2d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(76))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def AnnotateAccessories3d(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(78))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def DisableReflection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(80))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def DisableSpecular(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(82))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def BoxNonVisibleSignalBulbs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(84))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # pdStartDatasetCapture
    def UseInstancePointCaches(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(86))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # pdStartDatasetCapture
    def NewDataPipeline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(88))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def pdStartDatasetCaptureStart(builder): builder.StartObject(43)
def pdStartDatasetCaptureAddDatasetName(builder, datasetName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(datasetName), 0)
def pdStartDatasetCaptureAddScenarioName(builder, scenarioName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(scenarioName), 0)
def pdStartDatasetCaptureAddDesc(builder, desc): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(desc), 0)
def pdStartDatasetCaptureAddVersion(builder, version): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(version), 0)
def pdStartDatasetCaptureAddCreator(builder, creator): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(creator), 0)
def pdStartDatasetCaptureAddTimestamp(builder, timestamp): builder.PrependUint64Slot(5, timestamp, 0)
def pdStartDatasetCaptureAddStateDataPath(builder, stateDataPath): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(stateDataPath), 0)
def pdStartDatasetCaptureAddOutputPath(builder, outputPath): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(outputPath), 0)
def pdStartDatasetCaptureAddNumSettleFrames(builder, numSettleFrames): builder.PrependUint32Slot(8, numSettleFrames, 20)
def pdStartDatasetCaptureAddNumTrimFrames(builder, numTrimFrames): builder.PrependUint32Slot(9, numTrimFrames, 3)
def pdStartDatasetCaptureAddNumSyncFrames(builder, numSyncFrames): builder.PrependUint32Slot(10, numSyncFrames, 20)
def pdStartDatasetCaptureAddOutputTruncated3dAnnotations(builder, outputTruncated3dAnnotations): builder.PrependBoolSlot(11, outputTruncated3dAnnotations, 0)
def pdStartDatasetCaptureAddOverrideBoundingBox3dIds(builder, overrideBoundingBox3dIds): builder.PrependBoolSlot(12, overrideBoundingBox3dIds, 0)
def pdStartDatasetCaptureAddOutputDepthPointClouds(builder, outputDepthPointClouds): builder.PrependBoolSlot(13, outputDepthPointClouds, 0)
def pdStartDatasetCaptureAddOutputSceneDataset(builder, outputSceneDataset): builder.PrependBoolSlot(14, outputSceneDataset, 1)
def pdStartDatasetCaptureAddUsePointCacheBounds(builder, usePointCacheBounds): builder.PrependBoolSlot(15, usePointCacheBounds, 0)
def pdStartDatasetCaptureAddOutputSceneMetadata(builder, outputSceneMetadata): builder.PrependBoolSlot(16, outputSceneMetadata, 0)
def pdStartDatasetCaptureAddPhysicalGroundTruth(builder, physicalGroundTruth): builder.PrependBoolSlot(17, physicalGroundTruth, 0)
def pdStartDatasetCaptureAddPhysicalGroundTruthRange(builder, physicalGroundTruthRange): builder.PrependFloat32Slot(18, physicalGroundTruthRange, 250.0)
def pdStartDatasetCaptureAddForceSignalBulbShape(builder, forceSignalBulbShape): builder.PrependInt32Slot(19, forceSignalBulbShape, -1)
def pdStartDatasetCaptureAddForceSignalBulbColor(builder, forceSignalBulbColor): builder.PrependInt32Slot(20, forceSignalBulbColor, -1)
def pdStartDatasetCaptureAddForceSignalMountDirection(builder, forceSignalMountDirection): builder.PrependInt32Slot(21, forceSignalMountDirection, -1)
def pdStartDatasetCaptureAddRetainLidarCameraData(builder, retainLidarCameraData): builder.PrependBoolSlot(22, retainLidarCameraData, 0)
def pdStartDatasetCaptureAddMergeBikesRiders3d(builder, mergeBikesRiders3d): builder.PrependBoolSlot(23, mergeBikesRiders3d, 0)
def pdStartDatasetCaptureAddOutputInstancePointCaches(builder, outputInstancePointCaches): builder.PrependBoolSlot(24, outputInstancePointCaches, 0)
def pdStartDatasetCaptureAddKeepGlassTransparent(builder, keepGlassTransparent): builder.PrependBoolSlot(25, keepGlassTransparent, 0)
def pdStartDatasetCaptureAddBbox2dOnlyVisiblePixels(builder, bbox2dOnlyVisiblePixels): builder.PrependBoolSlot(26, bbox2dOnlyVisiblePixels, 0)
def pdStartDatasetCaptureAddAnnotateWingMirrors(builder, annotateWingMirrors): builder.PrependBoolSlot(27, annotateWingMirrors, 1)
def pdStartDatasetCaptureAddAnnotateWingMirrors3d(builder, annotateWingMirrors3d): builder.PrependBoolSlot(28, annotateWingMirrors3d, 1)
def pdStartDatasetCaptureAddRenderEgoVehicle(builder, renderEgoVehicle): builder.PrependBoolSlot(29, renderEgoVehicle, 0)
def pdStartDatasetCaptureAddHideAllVolumetrics(builder, hideAllVolumetrics): builder.PrependBoolSlot(30, hideAllVolumetrics, 1)
def pdStartDatasetCaptureAddVolumetricDensityScale(builder, volumetricDensityScale): builder.PrependFloat32Slot(31, volumetricDensityScale, 1.0)
def pdStartDatasetCaptureAddUseOpaqueGlass(builder, useOpaqueGlass): builder.PrependInt32Slot(32, useOpaqueGlass, 0)
def pdStartDatasetCaptureAddVehicleColorOffset(builder, vehicleColorOffset): builder.PrependInt32Slot(33, vehicleColorOffset, 0)
def pdStartDatasetCaptureAddHideCrosswalkSegmentationMesh(builder, hideCrosswalkSegmentationMesh): builder.PrependBoolSlot(34, hideCrosswalkSegmentationMesh, 0)
def pdStartDatasetCaptureAddKeepRawLidarData(builder, keepRawLidarData): builder.PrependBoolSlot(35, keepRawLidarData, 1)
def pdStartDatasetCaptureAddAnnotateAccessories2d(builder, annotateAccessories2d): builder.PrependBoolSlot(36, annotateAccessories2d, 0)
def pdStartDatasetCaptureAddAnnotateAccessories3d(builder, annotateAccessories3d): builder.PrependBoolSlot(37, annotateAccessories3d, 0)
def pdStartDatasetCaptureAddDisableReflection(builder, disableReflection): builder.PrependBoolSlot(38, disableReflection, 0)
def pdStartDatasetCaptureAddDisableSpecular(builder, disableSpecular): builder.PrependBoolSlot(39, disableSpecular, 0)
def pdStartDatasetCaptureAddBoxNonVisibleSignalBulbs(builder, boxNonVisibleSignalBulbs): builder.PrependBoolSlot(40, boxNonVisibleSignalBulbs, 0)
def pdStartDatasetCaptureAddUseInstancePointCaches(builder, useInstancePointCaches): builder.PrependBoolSlot(41, useInstancePointCaches, 1)
def pdStartDatasetCaptureAddNewDataPipeline(builder, newDataPipeline): builder.PrependBoolSlot(42, newDataPipeline, 0)
def pdStartDatasetCaptureEnd(builder): return builder.EndObject()
