# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class CameraConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsCameraConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CameraConfigFB()
        x.Init(buf, n + offset)
        return x

    # CameraConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CameraConfigFB
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def Height(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def Fov(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraConfigFB
    def Supersample(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # CameraConfigFB
    def CaptureRgb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def CaptureDepth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def CaptureNormals(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def CaptureSegmentation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def CaptureInstances(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def CaptureMotionvectors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def EnableStreaming(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def DistortionParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from .DistortionParamsFB import DistortionParamsFB
            obj = DistortionParamsFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraConfigFB
    def PostProcessParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PostProcessParamsFB import PostProcessParamsFB
            obj = PostProcessParamsFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraConfigFB
    def Lut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # CameraConfigFB
    def LutWeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.0

    # CameraConfigFB
    def NoiseParams(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = o + self._tab.Pos
            from .NoiseParamsFB import NoiseParamsFB
            obj = NoiseParamsFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraConfigFB
    def PostProcessMats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PostProcessMatsFB import PostProcessMatsFB
            obj = PostProcessMatsFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # CameraConfigFB
    def PostProcessMatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CameraConfigFB
    def TransmitGray(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def FisheyeModel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def DistortionLookupTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # CameraConfigFB
    def CaptureBasecolor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def CaptureProperties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # CameraConfigFB
    def TimeOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CameraConfigFB
    def CaptureBackwardmotionvectors(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def CameraConfigFBStart(builder): builder.StartObject(26)
def CameraConfigFBAddWidth(builder, width): builder.PrependInt32Slot(0, width, 0)
def CameraConfigFBAddHeight(builder, height): builder.PrependInt32Slot(1, height, 0)
def CameraConfigFBAddFov(builder, fov): builder.PrependFloat32Slot(2, fov, 0.0)
def CameraConfigFBAddSupersample(builder, supersample): builder.PrependFloat32Slot(3, supersample, 1.0)
def CameraConfigFBAddCaptureRgb(builder, captureRgb): builder.PrependBoolSlot(4, captureRgb, 0)
def CameraConfigFBAddCaptureDepth(builder, captureDepth): builder.PrependBoolSlot(5, captureDepth, 0)
def CameraConfigFBAddCaptureNormals(builder, captureNormals): builder.PrependBoolSlot(6, captureNormals, 0)
def CameraConfigFBAddCaptureSegmentation(builder, captureSegmentation): builder.PrependBoolSlot(7, captureSegmentation, 0)
def CameraConfigFBAddCaptureInstances(builder, captureInstances): builder.PrependBoolSlot(8, captureInstances, 0)
def CameraConfigFBAddCaptureMotionvectors(builder, captureMotionvectors): builder.PrependBoolSlot(9, captureMotionvectors, 0)
def CameraConfigFBAddEnableStreaming(builder, enableStreaming): builder.PrependBoolSlot(10, enableStreaming, 0)
def CameraConfigFBAddDistortionParams(builder, distortionParams): builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(distortionParams), 0)
def CameraConfigFBAddPostProcessParams(builder, postProcessParams): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(postProcessParams), 0)
def CameraConfigFBAddLut(builder, lut): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(lut), 0)
def CameraConfigFBAddLutWeight(builder, lutWeight): builder.PrependFloat32Slot(15, lutWeight, 1.0)
def CameraConfigFBAddNoiseParams(builder, noiseParams): builder.PrependStructSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(noiseParams), 0)
def CameraConfigFBAddPostProcessMats(builder, postProcessMats): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(postProcessMats), 0)
def CameraConfigFBStartPostProcessMatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def CameraConfigFBAddTransmitGray(builder, transmitGray): builder.PrependBoolSlot(19, transmitGray, 0)
def CameraConfigFBAddFisheyeModel(builder, fisheyeModel): builder.PrependInt32Slot(20, fisheyeModel, 0)
def CameraConfigFBAddDistortionLookupTable(builder, distortionLookupTable): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(distortionLookupTable), 0)
def CameraConfigFBAddCaptureBasecolor(builder, captureBasecolor): builder.PrependBoolSlot(22, captureBasecolor, 0)
def CameraConfigFBAddCaptureProperties(builder, captureProperties): builder.PrependBoolSlot(23, captureProperties, 0)
def CameraConfigFBAddTimeOffset(builder, timeOffset): builder.PrependFloat32Slot(24, timeOffset, 0.0)
def CameraConfigFBAddCaptureBackwardmotionvectors(builder, captureBackwardmotionvectors): builder.PrependBoolSlot(25, captureBackwardmotionvectors, 0)
def CameraConfigFBEnd(builder): return builder.EndObject()
