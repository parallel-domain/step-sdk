# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PlanningInputFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPlanningInputFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PlanningInputFB()
        x.Init(buf, n + offset)
        return x

    # PlanningInputFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PlanningInputFB
    def RouteLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def RoutePath(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # PlanningInputFB
    def RoutePathAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # PlanningInputFB
    def RoutePathLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # PlanningInputFB
    def LaneOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def LaneDriftAmp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def LaneDriftScale(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def EnableMergeDetection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # PlanningInputFB
    def LaneShiftTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def LaneShiftAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def LaneShiftSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def IgnoreObstacles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # PlanningInputFB
    def IgnoreSpeedLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # PlanningInputFB
    def LaneChangeChance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def LaneChangeCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PlanningInputFB
    def ParkingPreference(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # PlanningInputFB
    def IgnoreObstacleTypes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # PlanningInputFB
    def IgnoreObstacleTypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # PlanningInputFB
    def IgnoreObstacleTypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def PlanningInputFBStart(builder): builder.StartObject(15)
def PlanningInputFBAddRouteLength(builder, routeLength): builder.PrependFloat32Slot(0, routeLength, 0.0)
def PlanningInputFBAddRoutePath(builder, routePath): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(routePath), 0)
def PlanningInputFBStartRoutePathVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def PlanningInputFBAddLaneOffset(builder, laneOffset): builder.PrependFloat32Slot(2, laneOffset, 0.0)
def PlanningInputFBAddLaneDriftAmp(builder, laneDriftAmp): builder.PrependFloat32Slot(3, laneDriftAmp, 0.0)
def PlanningInputFBAddLaneDriftScale(builder, laneDriftScale): builder.PrependFloat32Slot(4, laneDriftScale, 0.0)
def PlanningInputFBAddEnableMergeDetection(builder, enableMergeDetection): builder.PrependBoolSlot(5, enableMergeDetection, 0)
def PlanningInputFBAddLaneShiftTime(builder, laneShiftTime): builder.PrependFloat32Slot(6, laneShiftTime, 0.0)
def PlanningInputFBAddLaneShiftAmount(builder, laneShiftAmount): builder.PrependFloat32Slot(7, laneShiftAmount, 0.0)
def PlanningInputFBAddLaneShiftSpeed(builder, laneShiftSpeed): builder.PrependFloat32Slot(8, laneShiftSpeed, 0.0)
def PlanningInputFBAddIgnoreObstacles(builder, ignoreObstacles): builder.PrependBoolSlot(9, ignoreObstacles, 1)
def PlanningInputFBAddIgnoreSpeedLimit(builder, ignoreSpeedLimit): builder.PrependBoolSlot(10, ignoreSpeedLimit, 0)
def PlanningInputFBAddLaneChangeChance(builder, laneChangeChance): builder.PrependFloat32Slot(11, laneChangeChance, 0.0)
def PlanningInputFBAddLaneChangeCooldown(builder, laneChangeCooldown): builder.PrependFloat32Slot(12, laneChangeCooldown, 0.0)
def PlanningInputFBAddParkingPreference(builder, parkingPreference): builder.PrependInt32Slot(13, parkingPreference, 0)
def PlanningInputFBAddIgnoreObstacleTypes(builder, ignoreObstacleTypes): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(ignoreObstacleTypes), 0)
def PlanningInputFBStartIgnoreObstacleTypesVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def PlanningInputFBEnd(builder): return builder.EndObject()
