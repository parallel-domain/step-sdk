# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PIDControllerFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPIDControllerFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PIDControllerFB()
        x.Init(buf, n + offset)
        return x

    # PIDControllerFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PIDControllerFB
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PIDControllerFB
    def Integral(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PIDControllerFB
    def Delta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PIDControllerFB
    def Output(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PIDControllerFB
    def ErrorBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PIDRingBufferFB import PIDRingBufferFB
            obj = PIDRingBufferFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PIDControllerFB
    def IntegralBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PIDRingBufferFB import PIDRingBufferFB
            obj = PIDRingBufferFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PIDControllerFB
    def DeltaBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PIDRingBufferFB import PIDRingBufferFB
            obj = PIDRingBufferFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PIDControllerFB
    def OutputBuffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .PIDRingBufferFB import PIDRingBufferFB
            obj = PIDRingBufferFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PIDControllerFBStart(builder): builder.StartObject(8)
def PIDControllerFBAddError(builder, error): builder.PrependFloat32Slot(0, error, 0.0)
def PIDControllerFBAddIntegral(builder, integral): builder.PrependFloat32Slot(1, integral, 0.0)
def PIDControllerFBAddDelta(builder, delta): builder.PrependFloat32Slot(2, delta, 0.0)
def PIDControllerFBAddOutput(builder, output): builder.PrependFloat32Slot(3, output, 0.0)
def PIDControllerFBAddErrorBuffer(builder, errorBuffer): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(errorBuffer), 0)
def PIDControllerFBAddIntegralBuffer(builder, integralBuffer): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(integralBuffer), 0)
def PIDControllerFBAddDeltaBuffer(builder, deltaBuffer): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(deltaBuffer), 0)
def PIDControllerFBAddOutputBuffer(builder, outputBuffer): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(outputBuffer), 0)
def PIDControllerFBEnd(builder): return builder.EndObject()
