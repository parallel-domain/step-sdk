# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TransformStateFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTransformStateFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TransformStateFB()
        x.Init(buf, n + offset)
        return x

    # TransformStateFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TransformStateFB
    def Parent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # TransformStateFB
    def ObjectToWorld(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .float4x4_t import float4x4_t
            obj = float4x4_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformStateFB
    def Velocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformStateFB
    def AngularVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformStateFB
    def Acceleration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformStateFB
    def AngularAcceleration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TransformStateFBStart(builder): builder.StartObject(6)
def TransformStateFBAddParent(builder, parent): builder.PrependUint64Slot(0, parent, 0)
def TransformStateFBAddObjectToWorld(builder, objectToWorld): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(objectToWorld), 0)
def TransformStateFBAddVelocity(builder, velocity): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(velocity), 0)
def TransformStateFBAddAngularVelocity(builder, angularVelocity): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(angularVelocity), 0)
def TransformStateFBAddAcceleration(builder, acceleration): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(acceleration), 0)
def TransformStateFBAddAngularAcceleration(builder, angularAcceleration): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(angularAcceleration), 0)
def TransformStateFBEnd(builder): return builder.EndObject()
