# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PedestrianStateFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPedestrianStateFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PedestrianStateFB()
        x.Init(buf, n + offset)
        return x

    # PedestrianStateFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PedestrianStateFB
    def Goal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .float4x4_t import float4x4_t
            obj = float4x4_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PedestrianStateFB
    def MaxSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PedestrianStateFB
    def PathDist(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PedestrianStateFB
    def PathId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # PedestrianStateFB
    def BehaviorFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # PedestrianStateFB
    def StateTimer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PedestrianStateFB
    def AnimationData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # PedestrianStateFB
    def SurfaceFlags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # PedestrianStateFB
    def PathGoal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from .float4x4_t import float4x4_t
            obj = float4x4_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def PedestrianStateFBStart(builder): builder.StartObject(9)
def PedestrianStateFBAddGoal(builder, goal): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(goal), 0)
def PedestrianStateFBAddMaxSpeed(builder, maxSpeed): builder.PrependFloat32Slot(1, maxSpeed, 0.0)
def PedestrianStateFBAddPathDist(builder, pathDist): builder.PrependFloat32Slot(2, pathDist, 0.0)
def PedestrianStateFBAddPathId(builder, pathId): builder.PrependUint64Slot(3, pathId, 0)
def PedestrianStateFBAddBehaviorFlags(builder, behaviorFlags): builder.PrependUint64Slot(4, behaviorFlags, 0)
def PedestrianStateFBAddStateTimer(builder, stateTimer): builder.PrependFloat32Slot(5, stateTimer, 0.0)
def PedestrianStateFBAddAnimationData(builder, animationData): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(animationData), 0)
def PedestrianStateFBAddSurfaceFlags(builder, surfaceFlags): builder.PrependUint64Slot(7, surfaceFlags, 0)
def PedestrianStateFBAddPathGoal(builder, pathGoal): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(pathGoal), 0)
def PedestrianStateFBEnd(builder): return builder.EndObject()
