# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PostProcessParamsFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPostProcessParamsFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PostProcessParamsFB()
        x.Init(buf, n + offset)
        return x

    # PostProcessParamsFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PostProcessParamsFB
    def ExposureCompensation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -100.0

    # PostProcessParamsFB
    def ExposureSpeedUp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcessParamsFB
    def ExposureSpeedDown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcessParamsFB
    def ExposureMinEv100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -100.0

    # PostProcessParamsFB
    def ExposureMaxEv100(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -100.0

    # PostProcessParamsFB
    def ExposureMeteringMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # PostProcessParamsFB
    def MotionBlurAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 1.5

    # PostProcessParamsFB
    def MotionBlurMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 5.0

    # PostProcessParamsFB
    def DofFocalDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # PostProcessParamsFB
    def DofDepthBlurAmount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcessParamsFB
    def DofDepthBlurRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return -1.0

    # PostProcessParamsFB
    def VignetteIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # PostProcessParamsFB
    def TonemapCurve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TonemapCurveFB import TonemapCurveFB
            obj = TonemapCurveFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PostProcessParamsFB
    def ExposureCompensationCurve(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

def PostProcessParamsFBStart(builder): builder.StartObject(14)
def PostProcessParamsFBAddExposureCompensation(builder, exposureCompensation): builder.PrependFloat32Slot(0, exposureCompensation, -100.0)
def PostProcessParamsFBAddExposureSpeedUp(builder, exposureSpeedUp): builder.PrependFloat32Slot(1, exposureSpeedUp, 0.0)
def PostProcessParamsFBAddExposureSpeedDown(builder, exposureSpeedDown): builder.PrependFloat32Slot(2, exposureSpeedDown, 0.0)
def PostProcessParamsFBAddExposureMinEv100(builder, exposureMinEv100): builder.PrependFloat32Slot(3, exposureMinEv100, -100.0)
def PostProcessParamsFBAddExposureMaxEv100(builder, exposureMaxEv100): builder.PrependFloat32Slot(4, exposureMaxEv100, -100.0)
def PostProcessParamsFBAddExposureMeteringMask(builder, exposureMeteringMask): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(exposureMeteringMask), 0)
def PostProcessParamsFBAddMotionBlurAmount(builder, motionBlurAmount): builder.PrependFloat32Slot(6, motionBlurAmount, 1.5)
def PostProcessParamsFBAddMotionBlurMax(builder, motionBlurMax): builder.PrependFloat32Slot(7, motionBlurMax, 5.0)
def PostProcessParamsFBAddDofFocalDistance(builder, dofFocalDistance): builder.PrependFloat32Slot(8, dofFocalDistance, -1.0)
def PostProcessParamsFBAddDofDepthBlurAmount(builder, dofDepthBlurAmount): builder.PrependFloat32Slot(9, dofDepthBlurAmount, 0.0)
def PostProcessParamsFBAddDofDepthBlurRadius(builder, dofDepthBlurRadius): builder.PrependFloat32Slot(10, dofDepthBlurRadius, -1.0)
def PostProcessParamsFBAddVignetteIntensity(builder, vignetteIntensity): builder.PrependFloat32Slot(11, vignetteIntensity, 0.0)
def PostProcessParamsFBAddTonemapCurve(builder, tonemapCurve): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(tonemapCurve), 0)
def PostProcessParamsFBAddExposureCompensationCurve(builder, exposureCompensationCurve): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(exposureCompensationCurve), 0)
def PostProcessParamsFBEnd(builder): return builder.EndObject()
