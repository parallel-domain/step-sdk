# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PhaseBulbValuesFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPhaseBulbValuesFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PhaseBulbValuesFB()
        x.Init(buf, n + offset)
        return x

    # PhaseBulbValuesFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PhaseBulbValuesFB
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # PhaseBulbValuesFB
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .BulbValues import BulbValues
            obj = BulbValues()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PhaseBulbValuesFB
    def LogicalState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def PhaseBulbValuesFBStart(builder): builder.StartObject(3)
def PhaseBulbValuesFBAddPhase(builder, phase): builder.PrependUint64Slot(0, phase, 0)
def PhaseBulbValuesFBAddValue(builder, value): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)
def PhaseBulbValuesFBAddLogicalState(builder, logicalState): builder.PrependInt8Slot(2, logicalState, 0)
def PhaseBulbValuesFBEnd(builder): return builder.EndObject()
