# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LanePoseFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLanePoseFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LanePoseFB()
        x.Init(buf, n + offset)
        return x

    # LanePoseFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LanePoseFB
    def LaneId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # LanePoseFB
    def FrenetPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .float2_t import float2_t
            obj = float2_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LanePoseFBStart(builder): builder.StartObject(2)
def LanePoseFBAddLaneId(builder, laneId): builder.PrependUint64Slot(0, laneId, 0)
def LanePoseFBAddFrenetPosition(builder, frenetPosition): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(frenetPosition), 0)
def LanePoseFBEnd(builder): return builder.EndObject()
