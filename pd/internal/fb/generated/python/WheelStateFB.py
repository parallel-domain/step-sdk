# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class WheelStateFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWheelStateFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WheelStateFB()
        x.Init(buf, n + offset)
        return x

    # WheelStateFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WheelStateFB
    def SuspSpringForce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WheelStateFB
    def LongitudinalSlip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WheelStateFB
    def LateralSlip(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WheelStateFB
    def IsInAir(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def WheelStateFBStart(builder): builder.StartObject(4)
def WheelStateFBAddSuspSpringForce(builder, suspSpringForce): builder.PrependFloat32Slot(0, suspSpringForce, 0.0)
def WheelStateFBAddLongitudinalSlip(builder, longitudinalSlip): builder.PrependFloat32Slot(1, longitudinalSlip, 0.0)
def WheelStateFBAddLateralSlip(builder, lateralSlip): builder.PrependFloat32Slot(2, lateralSlip, 0.0)
def WheelStateFBAddIsInAir(builder, isInAir): builder.PrependBoolSlot(3, isInAir, 0)
def WheelStateFBEnd(builder): return builder.EndObject()
