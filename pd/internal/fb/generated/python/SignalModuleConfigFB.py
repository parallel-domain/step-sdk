# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class SignalModuleConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSignalModuleConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SignalModuleConfigFB()
        x.Init(buf, n + offset)
        return x

    # SignalModuleConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SignalModuleConfigFB
    def SignaledIntersection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # SignalModuleConfigFB
    def LightFlashingPeriod(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SignalModuleConfigFB
    def LightIlluminatedPercentage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def SignalModuleConfigFBStart(builder): builder.StartObject(3)
def SignalModuleConfigFBAddSignaledIntersection(builder, signaledIntersection): builder.PrependUint64Slot(0, signaledIntersection, 0)
def SignalModuleConfigFBAddLightFlashingPeriod(builder, lightFlashingPeriod): builder.PrependFloat64Slot(1, lightFlashingPeriod, 0.0)
def SignalModuleConfigFBAddLightIlluminatedPercentage(builder, lightIlluminatedPercentage): builder.PrependFloat64Slot(2, lightIlluminatedPercentage, 0.0)
def SignalModuleConfigFBEnd(builder): return builder.EndObject()
