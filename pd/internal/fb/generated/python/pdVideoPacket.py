# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdVideoPacket(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdVideoPacket(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdVideoPacket()
        x.Init(buf, n + offset)
        return x

    # pdVideoPacket
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdVideoPacket
    def ClientFrameStateTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # pdVideoPacket
    def ServerFrameReceiveTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # pdVideoPacket
    def ServerFrameEncodeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # pdVideoPacket
    def ServerFrameSendTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # pdVideoPacket
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # pdVideoPacket
    def DataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # pdVideoPacket
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def pdVideoPacketStart(builder): builder.StartObject(5)
def pdVideoPacketAddClientFrameStateTime(builder, clientFrameStateTime): builder.PrependFloat64Slot(0, clientFrameStateTime, 0.0)
def pdVideoPacketAddServerFrameReceiveTime(builder, serverFrameReceiveTime): builder.PrependUint64Slot(1, serverFrameReceiveTime, 0)
def pdVideoPacketAddServerFrameEncodeTime(builder, serverFrameEncodeTime): builder.PrependUint64Slot(2, serverFrameEncodeTime, 0)
def pdVideoPacketAddServerFrameSendTime(builder, serverFrameSendTime): builder.PrependUint64Slot(3, serverFrameSendTime, 0)
def pdVideoPacketAddData(builder, data): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def pdVideoPacketStartDataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def pdVideoPacketEnd(builder): return builder.EndObject()
