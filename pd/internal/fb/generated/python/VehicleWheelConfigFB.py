# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class VehicleWheelConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVehicleWheelConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VehicleWheelConfigFB()
        x.Init(buf, n + offset)
        return x

    # VehicleWheelConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VehicleWheelConfigFB
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehicleWheelConfigFB
    def Assets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # VehicleWheelConfigFB
    def AssetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehicleWheelConfigFB
    def Radius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehicleWheelConfigFB
    def Width(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def VehicleWheelConfigFBStart(builder): builder.StartObject(4)
def VehicleWheelConfigFBAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def VehicleWheelConfigFBAddAssets(builder, assets): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(assets), 0)
def VehicleWheelConfigFBStartAssetsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehicleWheelConfigFBAddRadius(builder, radius): builder.PrependFloat32Slot(2, radius, 0.0)
def VehicleWheelConfigFBAddWidth(builder, width): builder.PrependFloat32Slot(3, width, 0.0)
def VehicleWheelConfigFBEnd(builder): return builder.EndObject()
