# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class PaintTexture(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsPaintTexture(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = PaintTexture()
        x.Init(buf, n + offset)
        return x

    # PaintTexture
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # PaintTexture
    def ColorRgb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # PaintTexture
    def Wear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def PaintTextureStart(builder): builder.StartObject(2)
def PaintTextureAddColorRgb(builder, colorRgb): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(colorRgb), 0)
def PaintTextureAddWear(builder, wear): builder.PrependFloat32Slot(1, wear, 0.0)
def PaintTextureEnd(builder): return builder.EndObject()
