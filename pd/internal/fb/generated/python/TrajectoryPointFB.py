# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TrajectoryPointFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTrajectoryPointFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TrajectoryPointFB()
        x.Init(buf, n + offset)
        return x

    # TrajectoryPointFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TrajectoryPointFB
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrajectoryPointFB
    def Heading(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TrajectoryPointFB
    def DistanceM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TrajectoryPointFB
    def SpeedMps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TrajectoryPointFB
    def AccelMinMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TrajectoryPointFB
    def AccelMaxMps2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TrajectoryPointFB
    def JerkMinMps3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TrajectoryPointFB
    def JerkMaxMps3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # TrajectoryPointFB
    def Gear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # TrajectoryPointFB
    def TimeS(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def TrajectoryPointFBStart(builder): builder.StartObject(10)
def TrajectoryPointFBAddPosition(builder, position): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def TrajectoryPointFBAddHeading(builder, heading): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(heading), 0)
def TrajectoryPointFBAddDistanceM(builder, distanceM): builder.PrependFloat32Slot(2, distanceM, 0.0)
def TrajectoryPointFBAddSpeedMps(builder, speedMps): builder.PrependFloat32Slot(3, speedMps, 0.0)
def TrajectoryPointFBAddAccelMinMps2(builder, accelMinMps2): builder.PrependFloat32Slot(4, accelMinMps2, 0.0)
def TrajectoryPointFBAddAccelMaxMps2(builder, accelMaxMps2): builder.PrependFloat32Slot(5, accelMaxMps2, 0.0)
def TrajectoryPointFBAddJerkMinMps3(builder, jerkMinMps3): builder.PrependFloat32Slot(6, jerkMinMps3, 0.0)
def TrajectoryPointFBAddJerkMaxMps3(builder, jerkMaxMps3): builder.PrependFloat32Slot(7, jerkMaxMps3, 0.0)
def TrajectoryPointFBAddGear(builder, gear): builder.PrependInt8Slot(8, gear, 0)
def TrajectoryPointFBAddTimeS(builder, timeS): builder.PrependFloat32Slot(9, timeS, 0.0)
def TrajectoryPointFBEnd(builder): return builder.EndObject()
