# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class VehiclePhysicsConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsVehiclePhysicsConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VehiclePhysicsConfigFB()
        x.Init(buf, n + offset)
        return x

    # VehiclePhysicsConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VehiclePhysicsConfigFB
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def BboxMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def BboxMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def WheelRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def WheelWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def Clearance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def WheelOffsets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def WheelOffsetsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysicsConfigFB
    def MaximumVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def StartVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def CenterOfMass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def SuspensionSpringRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def SuspensionDampingRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def GearsCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VehiclePhysicsConfigFB
    def GearsRatios(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VehiclePhysicsConfigFB
    def GearsRatiosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # VehiclePhysicsConfigFB
    def GearsRatiosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysicsConfigFB
    def EngineMaxTorque(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def EngineMaxRotationSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def WheelCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VehiclePhysicsConfigFB
    def AntirollStiffnesses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VehiclePhysicsConfigFB
    def AntirollStiffnessesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # VehiclePhysicsConfigFB
    def AntirollStiffnessesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysicsConfigFB
    def WheelConfigs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .VehicleWheelConfigFB import VehicleWheelConfigFB
            obj = VehicleWheelConfigFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def WheelConfigsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysicsConfigFB
    def PhysicsGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # VehiclePhysicsConfigFB
    def StartStationary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # VehiclePhysicsConfigFB
    def Buffer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def WheelBaseM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def RearAxleToRearBumperM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def FrontAxleToFrontBumperM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def HalfVehicleWidthM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def GeometricCenterToRearAxleM(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VehiclePhysicsConfigFB
    def Connections(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .VehicleConnectionFB import VehicleConnectionFB
            obj = VehicleConnectionFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VehiclePhysicsConfigFB
    def ConnectionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VehiclePhysicsConfigFB
    def StartGear(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

def VehiclePhysicsConfigFBStart(builder): builder.StartObject(30)
def VehiclePhysicsConfigFBAddMass(builder, mass): builder.PrependFloat32Slot(0, mass, 0.0)
def VehiclePhysicsConfigFBAddSize(builder, size): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)
def VehiclePhysicsConfigFBAddBboxMin(builder, bboxMin): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bboxMin), 0)
def VehiclePhysicsConfigFBAddBboxMax(builder, bboxMax): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bboxMax), 0)
def VehiclePhysicsConfigFBAddWheelRadius(builder, wheelRadius): builder.PrependFloat32Slot(4, wheelRadius, 0.0)
def VehiclePhysicsConfigFBAddWheelWidth(builder, wheelWidth): builder.PrependFloat32Slot(5, wheelWidth, 0.0)
def VehiclePhysicsConfigFBAddClearance(builder, clearance): builder.PrependFloat32Slot(6, clearance, 0.0)
def VehiclePhysicsConfigFBAddWheelOffsets(builder, wheelOffsets): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(wheelOffsets), 0)
def VehiclePhysicsConfigFBStartWheelOffsetsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def VehiclePhysicsConfigFBAddMaximumVelocity(builder, maximumVelocity): builder.PrependFloat32Slot(8, maximumVelocity, 0.0)
def VehiclePhysicsConfigFBAddStartVelocity(builder, startVelocity): builder.PrependFloat32Slot(9, startVelocity, 0.0)
def VehiclePhysicsConfigFBAddCenterOfMass(builder, centerOfMass): builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(centerOfMass), 0)
def VehiclePhysicsConfigFBAddSuspensionSpringRate(builder, suspensionSpringRate): builder.PrependFloat32Slot(11, suspensionSpringRate, 0.0)
def VehiclePhysicsConfigFBAddSuspensionDampingRate(builder, suspensionDampingRate): builder.PrependFloat32Slot(12, suspensionDampingRate, 0.0)
def VehiclePhysicsConfigFBAddGearsCount(builder, gearsCount): builder.PrependInt32Slot(13, gearsCount, 0)
def VehiclePhysicsConfigFBAddGearsRatios(builder, gearsRatios): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(gearsRatios), 0)
def VehiclePhysicsConfigFBStartGearsRatiosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsConfigFBAddEngineMaxTorque(builder, engineMaxTorque): builder.PrependFloat32Slot(15, engineMaxTorque, 0.0)
def VehiclePhysicsConfigFBAddEngineMaxRotationSpeed(builder, engineMaxRotationSpeed): builder.PrependFloat32Slot(16, engineMaxRotationSpeed, 0.0)
def VehiclePhysicsConfigFBAddWheelCount(builder, wheelCount): builder.PrependInt32Slot(17, wheelCount, 0)
def VehiclePhysicsConfigFBAddAntirollStiffnesses(builder, antirollStiffnesses): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(antirollStiffnesses), 0)
def VehiclePhysicsConfigFBStartAntirollStiffnessesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsConfigFBAddWheelConfigs(builder, wheelConfigs): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(wheelConfigs), 0)
def VehiclePhysicsConfigFBStartWheelConfigsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsConfigFBAddPhysicsGroup(builder, physicsGroup): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(physicsGroup), 0)
def VehiclePhysicsConfigFBAddStartStationary(builder, startStationary): builder.PrependBoolSlot(21, startStationary, 0)
def VehiclePhysicsConfigFBAddBuffer(builder, buffer): builder.PrependFloat32Slot(22, buffer, 0.0)
def VehiclePhysicsConfigFBAddWheelBaseM(builder, wheelBaseM): builder.PrependFloat32Slot(23, wheelBaseM, 0.0)
def VehiclePhysicsConfigFBAddRearAxleToRearBumperM(builder, rearAxleToRearBumperM): builder.PrependFloat32Slot(24, rearAxleToRearBumperM, 0.0)
def VehiclePhysicsConfigFBAddFrontAxleToFrontBumperM(builder, frontAxleToFrontBumperM): builder.PrependFloat32Slot(25, frontAxleToFrontBumperM, 0.0)
def VehiclePhysicsConfigFBAddHalfVehicleWidthM(builder, halfVehicleWidthM): builder.PrependFloat32Slot(26, halfVehicleWidthM, 0.0)
def VehiclePhysicsConfigFBAddGeometricCenterToRearAxleM(builder, geometricCenterToRearAxleM): builder.PrependFloat32Slot(27, geometricCenterToRearAxleM, 0.0)
def VehiclePhysicsConfigFBAddConnections(builder, connections): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(connections), 0)
def VehiclePhysicsConfigFBStartConnectionsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def VehiclePhysicsConfigFBAddStartGear(builder, startGear): builder.PrependInt8Slot(29, startGear, 1)
def VehiclePhysicsConfigFBEnd(builder): return builder.EndObject()
