# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdAck(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdAck(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdAck()
        x.Init(buf, n + offset)
        return x

    # pdAck
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdAck
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # pdAck
    def Response(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # pdAck
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def pdAckStart(builder): builder.StartObject(3)
def pdAckAddMessageType(builder, messageType): builder.PrependUint32Slot(0, messageType, 0)
def pdAckAddResponse(builder, response): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(response), 0)
def pdAckAddCode(builder, code): builder.PrependUint8Slot(2, code, 0)
def pdAckEnd(builder): return builder.EndObject()
