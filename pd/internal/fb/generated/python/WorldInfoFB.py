# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class WorldInfoFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWorldInfoFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldInfoFB()
        x.Init(buf, n + offset)
        return x

    # WorldInfoFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldInfoFB
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # WorldInfoFB
    def TimeOfDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # WorldInfoFB
    def Wetness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WorldInfoFB
    def RainIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WorldInfoFB
    def StreetLights(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WorldInfoFB
    def FogIntensity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WorldInfoFB
    def EnableHeadlights(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # WorldInfoFB
    def PerformanceFeature(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # WorldInfoFB
    def AntiAliasing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 4

    # WorldInfoFB
    def ScenarioSeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # WorldInfoFB
    def AgentMetadata(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .AgentMetadata import AgentMetadata
            obj = AgentMetadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def WorldInfoFBStart(builder): builder.StartObject(11)
def WorldInfoFBAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def WorldInfoFBAddTimeOfDay(builder, timeOfDay): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timeOfDay), 0)
def WorldInfoFBAddWetness(builder, wetness): builder.PrependFloat32Slot(2, wetness, 0.0)
def WorldInfoFBAddRainIntensity(builder, rainIntensity): builder.PrependFloat32Slot(3, rainIntensity, 0.0)
def WorldInfoFBAddStreetLights(builder, streetLights): builder.PrependFloat32Slot(4, streetLights, 0.0)
def WorldInfoFBAddFogIntensity(builder, fogIntensity): builder.PrependFloat32Slot(5, fogIntensity, 0.0)
def WorldInfoFBAddEnableHeadlights(builder, enableHeadlights): builder.PrependBoolSlot(6, enableHeadlights, 0)
def WorldInfoFBAddPerformanceFeature(builder, performanceFeature): builder.PrependUint8Slot(7, performanceFeature, 0)
def WorldInfoFBAddAntiAliasing(builder, antiAliasing): builder.PrependInt32Slot(8, antiAliasing, 4)
def WorldInfoFBAddScenarioSeed(builder, scenarioSeed): builder.PrependUint64Slot(9, scenarioSeed, 0)
def WorldInfoFBAddAgentMetadata(builder, agentMetadata): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(agentMetadata), 0)
def WorldInfoFBEnd(builder): return builder.EndObject()
