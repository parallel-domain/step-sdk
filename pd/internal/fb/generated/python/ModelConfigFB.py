# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ModelConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsModelConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModelConfigFB()
        x.Init(buf, n + offset)
        return x

    # ModelConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModelConfigFB
    def AssetName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # ModelConfigFB
    def LockToGround(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ModelConfigFB
    def GroundOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # ModelConfigFB
    def UseColorRgb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # ModelConfigFB
    def ColorRgb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelConfigFB
    def AssetTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ModelConfigFB
    def AssetTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ModelConfigFB
    def IsObstacle(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def ModelConfigFBStart(builder): builder.StartObject(7)
def ModelConfigFBAddAssetName(builder, assetName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(assetName), 0)
def ModelConfigFBAddLockToGround(builder, lockToGround): builder.PrependBoolSlot(1, lockToGround, 0)
def ModelConfigFBAddGroundOffset(builder, groundOffset): builder.PrependFloat32Slot(2, groundOffset, 0.0)
def ModelConfigFBAddUseColorRgb(builder, useColorRgb): builder.PrependBoolSlot(3, useColorRgb, 0)
def ModelConfigFBAddColorRgb(builder, colorRgb): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(colorRgb), 0)
def ModelConfigFBAddAssetTags(builder, assetTags): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(assetTags), 0)
def ModelConfigFBStartAssetTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModelConfigFBAddIsObstacle(builder, isObstacle): builder.PrependBoolSlot(6, isObstacle, 0)
def ModelConfigFBEnd(builder): return builder.EndObject()
