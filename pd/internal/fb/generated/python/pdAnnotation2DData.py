# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdAnnotation2DData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdAnnotation2DData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdAnnotation2DData()
        x.Init(buf, n + offset)
        return x

    # pdAnnotation2DData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdAnnotation2DData
    def InstanceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # pdAnnotation2DData
    def Left(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # pdAnnotation2DData
    def Top(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # pdAnnotation2DData
    def Right(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # pdAnnotation2DData
    def Bottom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # pdAnnotation2DData
    def Visibility(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # pdAnnotation2DData
    def Truncation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def pdAnnotation2DDataStart(builder): builder.StartObject(7)
def pdAnnotation2DDataAddInstanceId(builder, instanceId): builder.PrependUint64Slot(0, instanceId, 0)
def pdAnnotation2DDataAddLeft(builder, left): builder.PrependUint32Slot(1, left, 0)
def pdAnnotation2DDataAddTop(builder, top): builder.PrependUint32Slot(2, top, 0)
def pdAnnotation2DDataAddRight(builder, right): builder.PrependUint32Slot(3, right, 0)
def pdAnnotation2DDataAddBottom(builder, bottom): builder.PrependUint32Slot(4, bottom, 0)
def pdAnnotation2DDataAddVisibility(builder, visibility): builder.PrependFloat32Slot(5, visibility, 0.0)
def pdAnnotation2DDataAddTruncation(builder, truncation): builder.PrependFloat32Slot(6, truncation, 0.0)
def pdAnnotation2DDataEnd(builder): return builder.EndObject()
