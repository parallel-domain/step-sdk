# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class LinearMoverConfigFB(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLinearMoverConfigFB(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinearMoverConfigFB()
        x.Init(buf, n + offset)
        return x

    # LinearMoverConfigFB
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinearMoverConfigFB
    def Origin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearMoverConfigFB
    def Rotation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .float3x3_t import float3x3_t
            obj = float3x3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearMoverConfigFB
    def VelocityKeys(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from .VelocityKeyFB import VelocityKeyFB
            obj = VelocityKeyFB()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearMoverConfigFB
    def VelocityKeysLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # LinearMoverConfigFB
    def OrientToVelocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

    # LinearMoverConfigFB
    def BboxMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearMoverConfigFB
    def BboxMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .float3_t import float3_t
            obj = float3_t()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearMoverConfigFB
    def StopAtPathEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 1

def LinearMoverConfigFBStart(builder): builder.StartObject(7)
def LinearMoverConfigFBAddOrigin(builder, origin): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(origin), 0)
def LinearMoverConfigFBAddRotation(builder, rotation): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)
def LinearMoverConfigFBAddVelocityKeys(builder, velocityKeys): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(velocityKeys), 0)
def LinearMoverConfigFBStartVelocityKeysVector(builder, numElems): return builder.StartVector(16, numElems, 4)
def LinearMoverConfigFBAddOrientToVelocity(builder, orientToVelocity): builder.PrependBoolSlot(3, orientToVelocity, 1)
def LinearMoverConfigFBAddBboxMin(builder, bboxMin): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(bboxMin), 0)
def LinearMoverConfigFBAddBboxMax(builder, bboxMax): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bboxMax), 0)
def LinearMoverConfigFBAddStopAtPathEnd(builder, stopAtPathEnd): builder.PrependBoolSlot(6, stopAtPathEnd, 1)
def LinearMoverConfigFBEnd(builder): return builder.EndObject()
