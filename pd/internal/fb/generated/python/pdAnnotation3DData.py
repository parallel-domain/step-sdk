# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class pdAnnotation3DData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAspdAnnotation3DData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = pdAnnotation3DData()
        x.Init(buf, n + offset)
        return x

    # pdAnnotation3DData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # pdAnnotation3DData
    def InstanceId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # pdAnnotation3DData
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .pdFloat3 import pdFloat3
            obj = pdFloat3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # pdAnnotation3DData
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .pdFloat3 import pdFloat3
            obj = pdFloat3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # pdAnnotation3DData
    def Orientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .pdQuat import pdQuat
            obj = pdQuat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # pdAnnotation3DData
    def VisibleSensors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # pdAnnotation3DData
    def VisibleSensorsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # pdAnnotation3DData
    def VisibleSensorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def pdAnnotation3DDataStart(builder): builder.StartObject(5)
def pdAnnotation3DDataAddInstanceId(builder, instanceId): builder.PrependUint64Slot(0, instanceId, 0)
def pdAnnotation3DDataAddSize(builder, size): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(size), 0)
def pdAnnotation3DDataAddPosition(builder, position): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def pdAnnotation3DDataAddOrientation(builder, orientation): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)
def pdAnnotation3DDataAddVisibleSensors(builder, visibleSensors): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(visibleSensors), 0)
def pdAnnotation3DDataStartVisibleSensorsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def pdAnnotation3DDataEnd(builder): return builder.EndObject()
